---
title: "4 Data Visualisation"
code-copy: true
code-line-numbers: true
tidy: true
---

## 4.1 Introduction

Data visualisation is an important skill for data scientists. In fact, data manipulation and visualisations go hand in hand. In this section, we will use the `ggplot2` package within `tidyverse` to learn the foundations of data visualisation. 'ggplot' stands for *grammar of graphics*. 

As said before, Base R also comes with built-in functions for data visualisation. Let us briefly explore some of the functions in Base R before diving into `ggplot2`


```{r load gapminder}

## load gapminder data and save 
library(gapminder)
gapminder <- gapminder

# filter year 2007

gapminder_2007 <- dplyr::filter(gapminder, year == 2007)
```

You can create a histogram using the `hist()` function:

```{r Base R-hist}
hist(gapminder_2007 $lifeExp)
```

You can create a scatterplot to visualise the relationship between two numerical variables:

```{r Base R scatter}
plot(gapminder_2007 $lifeExp, gapminder_2007 $gdpPercap)
```

## 4.2 Welcome to ggplot

`ggplot2` has steps/processes you follow to create a plot. Let us illustrate using the `gapminder` dataset. Load `tidyverse` package first:

```{r ggplot-intro}
library(tidyverse)
```

Create a basic scatterplot of life expectancy and GDP per capita:

```{r ggplot-intro-scatter}
ggplot(data = gapminder_2007,
    aes(x = gdpPercap, y = lifeExp)) + 
    geom_point()
```

In the code above, we have three steps to create a plot:

1. `ggplot(data = gapminder)`: we are simply telling ggplot that we are using gapminder dataset

2. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))`: we are adding *mapping aesthetics* or *aesthetics*, allocating x, y axis. There are other *aesthetics* that we can add, such as *size, colour, shape, group, etc*. We will use these later in thise section.

3. `ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()`: We have added a geometry layer through `geoms_point()` function to create a scatterplot. *geoms* tell ggplot what type of geometry/graph/plot we want to create. There are several geoms that we are going to use, such as:

    - `geom_point()`
    
    - `geom_line()`
    
    - `geom_histogram()`
    
    - `geom_area()`
    
    - `geom_boxplot()`
    
    - `geom_bar()`
    

## 4.3 Visualising Numerical data

### 4.3.1 Single variable

For visualising one variable, we mostly histogram, density plot, etc:

Create a histogram of GDP per capita:

```{r ggplot-histogram}

ggplot(data = gapminder_2007, aes(gdpPercap)) +
  geom_histogram()
```

We can see that the GDP per capita variable is skewed. Density plots are also similar to histograms:

```{r ggplot-density}
ggplot(data = gapminder_2007, aes(gdpPercap)) +
  geom_density()
```

### 4.3.2 Visualising more than one numerical variables

A scatter plot is used to show relationship between two variables

```{r ggplot-scatter}
ggplot(data = gapminder_2007, aes(x = gdpPercap, y = lifeExp)) + 
    geom_point()
```

We can add other aeasthetics such as shape, colour etc: Let's add the colour aesthetics:

```{r ggplot-scatter-colour}
ggplot(data = gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) + 
    geom_point()
```

We can change the add the size aesthetics and use population of the country:

```{r ggplot-scatter-size}
ggplot(data = gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent, size = pop)) + 
  geom_point()
```

### 4.3.3 Visualising numerical by group/category

A boxplot and column charts are useful when we want to view statistics by a particular group, let say, GDP by continent:

```{r ggplot-boxplot}
ggplot(data = gapminder_2007, aes(x = continent, y = gdpPercap)) +
  geom_boxplot()
```





