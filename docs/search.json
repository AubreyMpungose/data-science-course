[
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "R Can be downloaded from CRAN, The Comprehensive R Archive Network. Simply go to the CRAN wesbite\nDownload the latest version of R (currently R-4.2.1 ) depending on the operating system of your machine:\n\nWindows\nmacOS\nLinux"
  },
  {
    "objectID": "getting-started.html#installing-r",
    "href": "getting-started.html#installing-r",
    "title": "Getting Started",
    "section": "",
    "text": "R Can be downloaded from CRAN, The Comprehensive R Archive Network. Simply go to the CRAN wesbite\nDownload the latest version of R (currently R-4.2.1 ) depending on the operating system of your machine:\n\nWindows\nmacOS\nLinux"
  },
  {
    "objectID": "getting-started.html#installing-rstudio",
    "href": "getting-started.html#installing-rstudio",
    "title": "Getting Started",
    "section": "1.1 Installing RStudio",
    "text": "1.1 Installing RStudio\nRstudio is an Integrated Development Environment (IDE) that makes it easier working with R. This might be trickier for beginners who are not familiar with programming. Think of R as the engine that makes the car run. RStudio would be additional aesthetics that makes the car look better. You can use R without RStudio to analyse data, but you cannot use RStudio without R. You can download the latest version of RStudio here. Make sure to sure RStudio Desktop\n\n\n\n\n\n\nR console\n\n\n\n\n\n\n\nRStudio\n\n\n\n\n\nIn RStudio, you have 4 panes, the script, where you can write lines of code and save the script for future purposes. On the top-right you have the Environment pane, where we can view the list of objects we have created in R; objects can include tables, datasets, models, plots, etc. On bottom-right, we have a console, it is the typical console we found R. Lastly, the last pane have different components/tabs: files tzb, where we can view the list of files we are connected to or are using; for example, where you stored you dataset. It also has a plot tab, used for viewing plots/graphs."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Workshops for Data Science",
    "section": "",
    "text": "These workshops aim to introduce participants to the foundations of data science using R programming Language. As you advance in our studies and career, you will learn that the ability to collect, clean, transform, analyse and use data for predictive analytics is one of the most needed skills in the labour market. As we live in the digital age, where big data has become a commodity, learning to handle these data systems will be one of the most important investments in your career.\nIn this course, we will be using R for programming and data analysis. R, along with Python, is flexible when working with data, especially large data. Majority of academics, researchers, and students who analyse quantitative data use programs such as SPSS, STATA and Excel, and I have also used them before. I discourage the use of these tools for following reasons. Firstly, they are expensive! Universities spend large sums of money to purchase these licences, which disadvantages students and academics in the developing world. Secondly, We passed the age of SPSS and other Graphic User Interface software, they are very limited. But if you insist on learning them, good for you.\n\nOn the other hand, R and Python are free and come with with ABSOLUTELY NO WARRANTY üòé . They are very flexible and can handle very large data. They are the dominant programming languages used in the labour market around the world. R and Python have thousands of libraries that can handle and analyse any type of data, including basic data cleaning and wrangling, transforming data, regression, visualisation, text analysis and natural language processing, statistical analysis, machine learning, geospatial analysis and visualisation. In academia, researchers are encouraged to make their research outputs Reproducible, that is, researchers must share code, data and analysis when submitting papers to journals. This is called Reproducible Science.\nBoth R and Python are awesome programming languages. Here, we will use R because I feel there are many libraries that are user friendly in R compared to Python. However, I will also share Python code that correspond with R code. At the end of this course, you will have an option to continue to serious data science stuff."
  },
  {
    "objectID": "index.html#an-invitation-to-r-for-data-science",
    "href": "index.html#an-invitation-to-r-for-data-science",
    "title": "R Workshops for Data Science",
    "section": "",
    "text": "These workshops aim to introduce participants to the foundations of data science using R programming Language. As you advance in our studies and career, you will learn that the ability to collect, clean, transform, analyse and use data for predictive analytics is one of the most needed skills in the labour market. As we live in the digital age, where big data has become a commodity, learning to handle these data systems will be one of the most important investments in your career.\nIn this course, we will be using R for programming and data analysis. R, along with Python, is flexible when working with data, especially large data. Majority of academics, researchers, and students who analyse quantitative data use programs such as SPSS, STATA and Excel, and I have also used them before. I discourage the use of these tools for following reasons. Firstly, they are expensive! Universities spend large sums of money to purchase these licences, which disadvantages students and academics in the developing world. Secondly, We passed the age of SPSS and other Graphic User Interface software, they are very limited. But if you insist on learning them, good for you.\n\nOn the other hand, R and Python are free and come with with ABSOLUTELY NO WARRANTY üòé . They are very flexible and can handle very large data. They are the dominant programming languages used in the labour market around the world. R and Python have thousands of libraries that can handle and analyse any type of data, including basic data cleaning and wrangling, transforming data, regression, visualisation, text analysis and natural language processing, statistical analysis, machine learning, geospatial analysis and visualisation. In academia, researchers are encouraged to make their research outputs Reproducible, that is, researchers must share code, data and analysis when submitting papers to journals. This is called Reproducible Science.\nBoth R and Python are awesome programming languages. Here, we will use R because I feel there are many libraries that are user friendly in R compared to Python. However, I will also share Python code that correspond with R code. At the end of this course, you will have an option to continue to serious data science stuff."
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "R Workshops for Data Science",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand R and its functions\nConduct basic programming using R\nLearn to wrangle, clean and transform data\nLearn the basics of data visualisation using ggplot2\nLearn how to conduct exploratory data analysis\nLearn to communicate and tell stories using data"
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "R Workshops for Data Science",
    "section": "Materials",
    "text": "Materials\nThere are tons of materials available online; below I share compulsory and recommended materials we will be using. There will be additional materials and slides for each section:\n\nWickham, H., & Grolemund, G. (2016). R for Data Science: import, tidy, transform, visualize, and model data. O‚ÄôReilly Media, Inc.\nHealy, K. (2018). Data visualization: a practical introduction. Princeton University Press."
  },
  {
    "objectID": "index.html#lets-get-started",
    "href": "index.html#lets-get-started",
    "title": "R Workshops for Data Science",
    "section": "Let‚Äôs Get Started",
    "text": "Let‚Äôs Get Started"
  },
  {
    "objectID": "my-profile.html",
    "href": "my-profile.html",
    "title": "About Me",
    "section": "",
    "text": "I am a social scientist and human geographer, currently completing a PhD thesis on geographies of youth in Durban. I lecture in the School of Education, University of KwaZulu Natal, Pietermaritzburg Campus. My research interests in:\n\nDevelopment (political economy, geographies, Polanyi)\nSocial Data Science\nComputational social science\nNeighbourhood contexts (education outcomes, health, deprivation)\nYouth studies\nSocial theory (Foucault ‚ù§Ô∏è, Agamben, governance, markets)\nPolitical geography and political participation (protest, elections, behaviour)\n\nI use data science tools, computational methods and statistical methods in my research. I enjoy programming in R and Python."
  },
  {
    "objectID": "weeks/week-1a.html",
    "href": "weeks/week-1a.html",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "understand the basics of R programming\nUnderstand data types and objects\nunderstand base (built-in) R functions"
  },
  {
    "objectID": "weeks/week-1a.html#learning-objectives",
    "href": "weeks/week-1a.html#learning-objectives",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "understand the basics of R programming\nUnderstand data types and objects\nunderstand base (built-in) R functions"
  },
  {
    "objectID": "weeks/week-1a.html#reading",
    "href": "weeks/week-1a.html#reading",
    "title": "Introduction to R Programming",
    "section": "Reading",
    "text": "Reading"
  },
  {
    "objectID": "weeks/week-1a.html#basics-of-r",
    "href": "weeks/week-1a.html#basics-of-r",
    "title": "Introduction to R Programming",
    "section": "Basics of R",
    "text": "Basics of R\nIn the previous section, we showed the layout of RStudio. For this lesson, you will write all the code in the scripts/source and see the output in the console. To comment on the code, you will use the hashtag (#) to tell R not to execute the line as a code.\nR can be used as a calculator:\n4 + 7 \n[1] 11\n9 * 6 \n[1] 54\nArithmetic Operators\n\n\nDescription\nOperator\nExample\n\n\n\nAddition\n+\n1 + 3\n\n\nSubtract\n-\n90 - 5\n\n\nMultiplication\n*\n6 * 7\n\n\nExponentiation\n^\n3 ^ 6\n\n\nDivision\n/\n54 / 7\n\n\n\nType in and run the above examples in the script or console.\nAssignment operator\nNotice that we have been running previous codes without assigning them to objects. We use the assignment operator (&lt;-) in R to assign whatever we have created into object; this can be a plot, a variable, a table, etc. Using above example, let us recreate our code but assigning them:\n\naddition &lt;- 4 + 7 \n\nprint(addition)\n\n[1] 11\n\nmultiplication &lt;- 9 * 6 \n\nprint(multiplication)\n\n[1] 54\n\n\nNotice in the above code, we have told R to create an object called ‚Äòaddition‚Äô and every time we call print() function, the results will be printed in the console. Please remember the assignment operator (&lt;-) as we will use it through this course. We can also assign objects using =:\n\naddition = 4 + 7\n\nprint(addition)\n\n[1] 11\n\n\nHowever, many R programmers and I use the &lt;- operator for a serious reasons; so we will stick to it.\nAlso, you do not necessarily need to call the print() function in order to print results/output, you can just write the name of the object you have created, run it and it will be printed:\n\nriver_km &lt;- 1200\n\nriver_km\n\n[1] 1200\n\n\nNotice that the object river_km when we print the object river_km, it prints what is inside of it, the element on the console.\nBasically, we have created variables (addition, multiplication, river_km). With these variables, we can perform basic analysis:\n\ntugela_length &lt;- 502\n\norange_river_length &lt;- 2200\n\n# Find the difference in river length\norange_river_length - tugela_length\n\n[1] 1698\n\n# sum of rivers\n\norange_river_length + tugela_length\n\n[1] 2702\n\n\nData types in R\nThere 3 basic data types in R\n\ncharacter: strings, text, etc\nnumeric: numbers, can be integers or whole numbers\nlogical: TRUE/FALSE, also called Boolean\n\nAn example of a character:\n\nriver &lt;- \"Tugela\"\n\nprovince &lt;- \"KZN\"\n\nNotice that a character need to be surrounded by (‚Äú‚Äú) every time, otherwise R will return an error\n\nriver &lt;- Tugela\n\nError in eval(expr, envir, enclos): object 'Tugela' not found\n\nprovince &lt;- KZN\n\nError in eval(expr, envir, enclos): object 'KZN' not found\n\n\nAn example of a numerical:\n\ntugela_length_km &lt;- 502\n\norange_river_length &lt;- 2200\n\nnumericals do not to need to be surrounded by \" \", if you do, they will be stored as numeric.\nAn example of a logical data type:\n\nkzn &lt;- TRUE\n\nkzn \n\n[1] TRUE\n\ngauteng &lt;- FALSE\n\ngauteng \n\n[1] FALSE\n\n\nYou can ask R to tell you the type of the data structure by using class() function:\n\nclass(tugela_length_km)\n\n[1] \"numeric\"\n\nclass(orange_river_length)\n\n[1] \"numeric\"\n\nclass(river)\n\n[1] \"character\"\n\nclass(gauteng)\n\n[1] \"logical\""
  },
  {
    "objectID": "weeks/week-1a.html#base-r-functions",
    "href": "weeks/week-1a.html#base-r-functions",
    "title": "Introduction to R Programming",
    "section": "Base R functions",
    "text": "Base R functions\nR has built-in functions that we can use to analyse and manipulate data. A function is always followed by (). We will use examples to illustrate various R functions.\nSummary statistics\nBasic summary statistics functions are mean, median, range, standard deviation, etc. We can get in R using the mean() function:\n\n# first create a vector of numbers (\"numeric vector\")\n\nrivers_length &lt;- c(502, 2200, 1500, 3050, 800)\n\nrivers_length\n\n[1]  502 2200 1500 3050  800\n\nmean(rivers_length)\n\n[1] 1610.4\n\n\nThe mean of a rivers_length variable we have created is 1610.4.\nWe can use the median() function to get the median of our variable:\n\nmedian(rivers_length)\n\n[1] 1500\n\n\nThe median age is 1500\nAnd also the standard deviation using sd() function:\n\nsd(rivers_length)\n\n[1] 1038.937\n\n\nYou can get minimum and maximum values using min() and max() functions, respectively:\n\nmin(rivers_length)\n\n[1] 502\n\nmax(rivers_length)\n\n[1] 3050\n\n\nYou can create a basic plot using a hist() function:\n\nhist(rivers_length)\n\n\n\n\nYou may want to arrange the values into ascending or descending order using the sort() function:\n\nsort(rivers_length) # sort into ascending order\n\n[1]  502  800 1500 2200 3050\n\nsort(rivers_length, decreasing = T) # sort into descending order\n\n[1] 3050 2200 1500  800  502\n\n\nIn this section, you have learnt basic data types, functions and operators. Next, we learn different type of data structures."
  },
  {
    "objectID": "weeks/week-1b.html",
    "href": "weeks/week-1b.html",
    "title": "2 Data Structures in R",
    "section": "",
    "text": "While I aim to introduce data structures: vectors, dataframes, lists, matrices, however our key focus is on dataframes"
  },
  {
    "objectID": "weeks/week-1b.html#learning-objectives",
    "href": "weeks/week-1b.html#learning-objectives",
    "title": "2 Data Structures in R",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nTo understand data types: vectors, dataframes, lists, matrices\nTo do basic analysis"
  },
  {
    "objectID": "weeks/week-1b.html#please-read",
    "href": "weeks/week-1b.html#please-read",
    "title": "2 Data Structures in R",
    "section": "Please Read",
    "text": "Please Read"
  },
  {
    "objectID": "weeks/week-1b.html#vectors",
    "href": "weeks/week-1b.html#vectors",
    "title": "2 Data Structures in R",
    "section": "2.1 Vectors",
    "text": "2.1 Vectors\nRemember objects we created in the previous section)? Those were all vectors. A vector is the basic data structure used to hold values of the same type. Similar to the previous section, a vector can be:\n\nnumeric\ncharacter\nlogical\n\nAlthough we are repeating stuff from previous section, but it worth it.\n2.1.1 Character vector\nLet us create a character vector of countries in Southern Africa:\n\nsouthern_africa &lt;- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\n## print southern_africa\n\nsouthern_africa\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\n\nWe have created vector that named southern_africa, and it has the countries in the Southern African Region. Let us use basic functions to examine our southern_africa vector. We can get the type of vector by using class() function:\n\nclass(southern_africa)\n\n[1] \"character\"\n\n\nIt is character vector. Remember from the previous section what is the character data type.\nWe can examine the length by using length() function:\n\nlength(southern_africa)\n\n[1] 10\n\n\nWe have 10 elements in the southern_africa vector\n2.1.2 Numeric vector\nLet us create a numeric vector, that we name life_expectancy, that has the average life expectancy of the countries of Southern Africa:\n\nlife_expectancy &lt;- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\n\n## print the life_expectancy vector\n\nlife_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n\nWe can confirm the type of vector we have created by using the class() function:\n\nclass(life_expectancy)\n\n[1] \"numeric\"\n\n\nIndeed, the life_expectancy vector is a numeric vector.\nLet us do basic analyses of this vector. We can get the mean by using mean() functions:\n\nmean(life_expectancy)\n\n[1] 59.72\n\n\nWe can get the median and standard deviation of life_expectancy vector using median() and sd() functions, respectively:\n\nmedian(life_expectancy)\n\n[1] 60.2\n\nsd(life_expectancy)\n\n[1] 2.898582\n\n\nYou can get an element of vector by using [] function. Let us get the first element in life_expectancy vector:\n\nlife_expectancy[1]\n\n[1] 61.6\n\n\nTo get the 1st, 5th, 8th elements within a vector, you would do the following:\n\nlife_expectancy[c(1, 5, 8)]\n\n[1] 61.6 62.9 62.3\n\n\nYou can also extract the vector elements by using the colon (:):\n\nlife_expectancy[3:6]\n\n[1] 57.1 53.1 62.9 59.3\n\n\nHere, we wanted to get all the elements starting from the 3rd position to the 6th position.\nKey lesson: a vector holds items of a similar type: as we have seen in the southern_countries and life_exepctancy vectors."
  },
  {
    "objectID": "weeks/week-1b.html#dataframes",
    "href": "weeks/week-1b.html#dataframes",
    "title": "2 Data Structures in R",
    "section": "2.2 Dataframes",
    "text": "2.2 Dataframes\nDataframes will be the key focus throughout the course, so I will just briefly explain what is a dataframe. A dataframe is tabular data format, consisting of columns and rows. Let us use an example by creating a dataframe in R:\n\n# Create a character vector\ncountry_names &lt;- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\ncountry_names\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\n## Create a numeric vector\n\nlife_expectancy &lt;- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\nlife_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n\nBecause we have 2 vectors of equal length, we can create a dataframe, using a data.frame() function:\n\nafrica_df &lt;- data.frame(country_names, life_expectancy) #combine two vectors to create a dataframe\n\nafrica_df\n\n   country_names life_expectancy\n1         Angola            61.6\n2       Botswana            61.1\n3        Lesotho            57.1\n4         Malawi            53.1\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n\nWe have created africa_df dataframe, with columns and rows. Let us examine it. How many columns and rows are in the dataframe. We can use the str() function:\n\nstr(africa_df)\n\n'data.frame':   10 obs. of  2 variables:\n $ country_names  : chr  \"Angola\" \"Botswana\" \"Lesotho\" \"Malawi\" ...\n $ life_expectancy: num  61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n\nR tells us that there are 10 observations (rows) and 2 columns\nLet us view the first few observations (rows) using the head() function:\n\nhead(africa_df)\n\n  country_names life_expectancy\n1        Angola            61.6\n2      Botswana            61.1\n3       Lesotho            57.1\n4        Malawi            53.1\n5    Mozambique            62.9\n6       Namibia            59.3\n\n\nView the last few observations using the tail()\n\ntail(africa_df)\n\n   country_names life_expectancy\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n\nIn the following sections, we will be working with dataframes a lot, and other non-exhastive functions to manipulate and transofrm dataframes."
  },
  {
    "objectID": "weeks/week-1b.html#other-data-types-matrices-and-lists",
    "href": "weeks/week-1b.html#other-data-types-matrices-and-lists",
    "title": "2 Data Structures in R",
    "section": "2.3 Other data types: matrices and lists",
    "text": "2.3 Other data types: matrices and lists\nYou will learn more about matrix objects when you advance in your data science career.\nlists are another data structure that are used to hold objects of different type. For example, they can hold both vector and dataframe:\n\n## we already have `africa_df` dataframe\n\n## let us create a vector\n\nnames &lt;- c(\"Aubrey\", \"Sphethu\", \"Peter\")\n\nages &lt;- c(32, 7, 19)\n\nWe have objects: africa_df (dataframe) and names (vector) and ages (vector) objects. From these objects, we can create a lists:\n\nfirst_list &lt;- list(africa_df, names, ages)\n\nfirst_list\n\n[[1]]\n   country_names life_expectancy\n1         Angola            61.6\n2       Botswana            61.1\n3        Lesotho            57.1\n4         Malawi            53.1\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n[[2]]\n[1] \"Aubrey\"  \"Sphethu\" \"Peter\"  \n\n[[3]]\n[1] 32  7 19\n\n\nDid you see that Jimmy? We actually printed the list. As you advance in your programming with R, you will see why lists are important and how everything is a lit."
  },
  {
    "objectID": "weeks/week-2.html#base-r-vs-external-packages",
    "href": "weeks/week-2.html#base-r-vs-external-packages",
    "title": "3 Data Visualisation",
    "section": "Base R vs External Packages",
    "text": "Base R vs External Packages\nUntil now, we have used functions within Base R, which are already installed in R. While Base/bulit-in R functions are important, however, in many cases, we want to use external packages to do any task we want. This also applies in other programming languages like Python. For example, if we want to do spatial and GIS analysis, we can install the sf package; for machine learning, we can use caret and tidymodels packages. There are over 2 000 R packages, contributed by different individuals around the world, and they are stored and curated in the CRAN website. In most of the cases, you will be working with external packages.\nOne of the most popular packages in R is the tidyverse meta-package, which include a collection of packages for working with data; some of packages in the tidyverse are:\n\ndplyr: for data cleaning, wrangling and transformation\nggplot2: for data visualisation\ntidyr: for tidying up data\nreadr: for importing data\npurrr: for advanced functional programming\nstringr: for manipulating string/text data\n\nThere are other packages in the tidyverse. The philosophy of tidyverse is tidy data:\n\n\nEach variable is a column; each column is a variable.\nEach observation is row; each row is an observation.\nEach value is a cell; each cell is a single value. [@r_4_ds]\n\n\n\n\n\nTidy data\n\nTidy data is a principle we are going to stick on through this course:\n\n\nTidy data @wickham_tidyverse_2019\n\nSo all in all, tidyverse make it easier to work with dataframes and most people prefer it than base R functions. We will use an example at the end to understand the differences between Base R and tydiverse. You will need to install the package first. In R you install a package by calling install.package() function:\n\ninstall.packages(\"tidyverse\")\n\nWhenever you need to use an external package and its functions, you first need to load it using library() function. In our case, we want to load the tidyverse package we have just installed:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.2 ‚îÄ‚îÄ\n‚úî ggplot2 3.4.1     ‚úî purrr   1.0.1\n‚úî tibble  3.1.8     ‚úî dplyr   1.1.0\n‚úî tidyr   1.3.0     ‚úî stringr 1.5.0\n‚úî readr   2.1.4     ‚úî forcats 1.0.0\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n\n\nYou will load other packages like this."
  },
  {
    "objectID": "weeks/week-2.html#introduction-to-data-visualisation",
    "href": "weeks/week-2.html#introduction-to-data-visualisation",
    "title": "3 Data Visualisation",
    "section": "3.1 Introduction to data visualisation",
    "text": "3.1 Introduction to data visualisation\nData visualisation is an important skill for data scientists. In fact, data manipulation and visualisations go hand in hand. Before any analysis, it is important to visualise data to explore its distribution, relationships, normality, etc.\nIn this section, we will use the ggplot2 package within tidyverse to learn the foundations of data visualisation. The ggplot2 package got it philosophy from the book The Grammar of Graphics, written by Leland Wilkinson. The ggplot2 package was developed by Hadley Wickham, probably one of the most greatest data scientist in this era.\nWe will be working with the gapminder dataset, which is the real world data. You will need to install its first because it comes as a package:\n\ninstall.packages(\"gapminder\")\n\nAfter installing the gapminder data, you will have to load it using library function:\n\nlibrary(gapminder)\n\nRemember that we said everything we create is an object and we need to assign it? Let us assign gapminder that and name simply as gapminder using the &lt;- operator:\n\ngapminder &lt;- gapminder\n\nExplore the data first; how many columns and rows are in gapminder dataframe? We will use str() function:\n\nstr(gapminder)\n\ntibble [1,704 √ó 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nWe can see that gapminder has 6 and 1704. The columns in the dataset are:\n\ncountry: Simply the country\ncontinent: Continent\nyear: The year data was collected\nlifeExp: Life expectancy of a country in year\npop: Population of the country in a year\ngdpPercap: Gross Domestic Product of a country in a year\n\nggplot2 has steps/processes you follow to create a plot. Let us illustrate using the gapminder dataset. Load ggplot2 package first:\n\nlibrary(ggplot2)\n\nA plot created in using ggplot2 has the following components/layers, and we will go through them step-by-step:\n\n\nsource"
  },
  {
    "objectID": "weeks/week-2.html#create-a-plot",
    "href": "weeks/week-2.html#create-a-plot",
    "title": "3 Data Visualisation",
    "section": "3.2 Create a plot",
    "text": "3.2 Create a plot\nFrom the ggapminder dataframe, we will create a scatterplot of life expectancy and GDP per capita, and add all the components of ggplot step-by-step.\n3.2.1 Layer 1: data\nWe use the ggplot() function to add data, in this case, gapminder dataframe:\n\nggplot(data = gapminder)\n\n\n\n\n3.2.2 Layer 2: aesthetics\nAesthetics are used to allocate x and y variables, depending on the type of the plot we want to create, in this case, x variable is gdpPercap and y variable is lifeExp:\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))\n\n\n\n\nThere are other aesthetics that we can add, such as size, colour, shape, group, etc. We will use these later in this section.\n3.2.3 Layer 3: geometry\nGeometry is the type of plot/object we want to create. In our casewe want to create a scatterplot, by using geom_point() function:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n\n\n\n\nWe now have our first plot. There other geometry types in ggplot depending on the type of data you have\n\ngeom_point() : for sactterplots\ngeom_line() : for line plots\ngeom_histogram() : for histogram\ngeom_area() : for area charts\ngeom_boxplot() : for boxplots\ngeom_bar() : for bar graphs\n\nIn the code above, we have three steps to create a plot:\n\nggplot(data = gapminder): we are simply telling ggplot that we are using gapminder dataset\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)): we are adding mapping aesthetics or aesthetics, allocating x, y axis.\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(): We have added a geometry layer through geoms_point() function to create a scatterplot.\n3.2.4 Layer 4: Labels\nggplot2 package can handle various plot labels, including axis titles and graph titles. We can do this using labs() function:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\")\n\n\n\n\n3.2.5 Facets\nFaceting is used when we‚Äôd like to split a particular visualization by the values of another variable. This will create multiple copies of the same type of plot with matching x and y axes, but whose content will differ.\nWhen we one to split the plots into various sub-categories, by using a categorical variable, we use facet_wrap() function. For example, we may want to split the above plot by continent:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent)\n\n\n\n\nThere are other argument that comes with facet_wrap() function. We can specify tghe number of rows and columns, using nrow() and ncol() functions, respectively.\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent, ncol = 5)\n\n\n\n\n3.2.6 Transforming axis scales\nNotice that x-axis is not normally distributed. One of the method to use is to transform data to log10, to normnalise it:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point() +\n  scale_x_log10()\n\n\n\n\nLook how it changes.\nThere are many scales functions and you will learn them along the way by coding and exploring ggplot.\n3.2.7 Returning to aeathetics\nWe can add other aesthetics in our plot, for example, we can allocate colour to the continent column:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point() +\n  scale_x_log10()\n\n\n\n\nNotice how countries in Europe tend to have higher GDP per capita and and higher life expectancy compared to African countries.\nWe can also change the shape of points in the aesthetics:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent, shape = continent)) + \n    geom_point() +\n  scale_x_log10()\n\n\n\n\nThere are many other aesthetics arguments that are used and they are beyond the scope of this course. It takes practice.\n3.2.8 Themes\nTry experimenting with different themes that comes with ggplot. theme_minimal() will produce a minimalist theme with less background:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal()\n\n\n\n\nThere are other themes that can transform your plots to look more elegant.\nYou can also choose the how fonts appear using themes() function:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme(text = element_text(size = 15))\n\n\n\n\nWith themes() function, you can remove borders, change the colour of fonts, remove the legend, etc."
  },
  {
    "objectID": "weeks/week-2.html#visualising-numerical-data",
    "href": "weeks/week-2.html#visualising-numerical-data",
    "title": "3 Data Visualisation",
    "section": "3.3 Visualising Numerical data",
    "text": "3.3 Visualising Numerical data\n3.3.1 Single variable\nFor visualising one variable, we mostly histogram, density plot, etc:\nCreate a histogram of GDP per capita:\n\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can see that the GDP per capita variable is skewed. Density plots are also similar to histograms:\n\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_density()\n\n\n\n\n3.3.2 Visualising more than one numerical variables\nA scatter plot is used to show relationship between two variables\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n\n\n\n\nWe can add other aeasthetics such as shape, colour etc: Let‚Äôs add the colour aesthetics:\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point()\n\n\n\n\nWe can change the add the size aesthetics and use population of the country:\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent, size = pop)) + \n  geom_point()\n\n\n\n\n3.3.3 Visualising numerical by group/category\nA boxplot is useful when we want to view statistics by a particular group, let say, GDP by continent:\n\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot()\n\n\n\n\nWe can also use a column chart, let say, view GDP per capita by continent:\n\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_col()\n\n\n\n\n3.3.4 visualise trends\nWe mainly use line graphs to visualise statistics over time. Let use see how life expectancy changes over time\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line()\n\n\n\n\nThis looks ugly, but we will learn how to create proper line plots at the end.\nYou can also use stacked column chart:\n\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col()\n\n\n\n\nView by continent and make it 100% stacked bar\n\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\")\n\n\n\n\nYou can make horizontal bars by using coord_flip():\n\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\") +\n  coord_flip()"
  },
  {
    "objectID": "weeks/week-2.html#visualising-categoricalcharacter-data",
    "href": "weeks/week-2.html#visualising-categoricalcharacter-data",
    "title": "3 Data Visualisation",
    "section": "3.4 Visualising categorical/character data",
    "text": "3.4 Visualising categorical/character data\nIn the gapminder dataset, we have two categorical columns: country and continent. One of the plot used for handling categorical data is bar chart. In ggplot, we use geom_bar:\n\nggplot(data = gapminder, aes(x = continent)) + \n  geom_bar()\n\n\n\n\nBonus one: Interactive charts\nYou can make your charts interactive by using plotly package, you will need to install it first\n\ninstall.packages(plotly)\n\nThen load the package:\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nFirst, create a plot using ggplot() and save it using the &lt;- operator:\n\nfirst_plot &lt;- ggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() \n\nWe named the plot first_plot. From the plotly package, you going to use ggplotly() function and put the plot object you have created:\n\nggplotly(first_plot)\n\n\n\n\n\nExperiment with the results, when you hoover around the plot, you can see it shows information by variable. You can select which continent to make visible by clicking on the legend. Beautiful!\nBonus Two: Animate\nYou can create an animated chart using the gganimate package. Install first:\n\ninstall.packages(gganimate)\n\nLoad the package:\n\nlibrary(gganimate)\n\nYou would want to see how the life expectancy and gdp per capita changes over time. First create the plot, but add few functions:\n\nanimated_plot &lt;- ggplot(data = gapminder,\n       aes(x = gdpPercap, \n           y = lifeExp, \n           size = pop,\n           colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = 'Year: {frame_time}',\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() +\n  transition_time(year) +\n  ease_aes('linear') \n\n\nanimate(animated_plot)\n\n\n\n\nLook at the results!\nThis section introduced you to basics of data visualisation using ggplot2 package. You may need to consult the following materials for intermediate and advanced skills in data visualisation:\n\nHealy, K. (2018). Data visualization: a practical introduction. Princeton University Press\nThe R Graph Gallery\nR for Data Science. Chapter 10-12\nData visualisation with ggplot2: cheatsheet"
  },
  {
    "objectID": "weeks/week-3.html",
    "href": "weeks/week-3.html",
    "title": "4 Data Wrangling and Manipulation",
    "section": "",
    "text": "Understand dataframes\nManipulate, transform and analyse dataframes\n\nDataframes, as we saw the previous section, is a tabular data format, with columns and rows. Columns are variable names and rows are individual observations.\nLet us a basic data frame with three columns: country, life expectancy, and population of Southern African countries. First, we create individual vectors:\n\n# Create a character vector\ncountry_name &lt;- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\ncountry_name\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\n## Create a numeric vector\n\nlife_expectancy &lt;- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\nlife_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n## create another numeric vector\n\npopulation &lt;- c(34500000, 2590000, 228000, 19890000, 32080000,  2530000, 59390000, 1190000, 19470000, 1599000)\n\nBecause we have 3 vectors of equal length, we can create a dataframe, using a data.frame() function:\n\nsouthern_africa_df &lt;- data.frame(country_name, life_expectancy, population) #combine two vectors to create a dataframe\n\nsouthern_africa_df ## print the dataframe\n\n   country_name life_expectancy population\n1        Angola            61.6   34500000\n2      Botswana            61.1    2590000\n3       Lesotho            57.1     228000\n4        Malawi            53.1   19890000\n5    Mozambique            62.9   32080000\n6       Namibia            59.3    2530000\n7  South Africa            59.3   59390000\n8     Swaziland            62.3    1190000\n9        Zambia            61.2   19470000\n10     Zimbabwe            59.3    1599000\n\n\nA dataframe is basically made of vectors (columns). In the southern_africa_df dataframe, we have 3 columns: country_name, life_expectancy population. We can extract these elements using the $ sign:\n\nsouthern_africa_df$country_name\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\nsouthern_africa_df$life_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\nsouthern_africa_df$population\n\n [1] 34500000  2590000   228000 19890000 32080000  2530000 59390000  1190000\n [9] 19470000  1599000\n\n\n\nWe will use the dplyr package to manipulate data. dplyr is part of tidyverse meta-package and is mostly used to clean, manipulate and transform dataframes. dplyr has 5 main verbs/functions:\n\nselect(): for selecting particular columns in a dataframe\nfilter(): for sub-setting rows based on the specified criteria\narrange(): sort rows/observations based (ascending/descending)\nsummarise(): for summary statistics\nmutate(): create new columns based on the manipulation of the existing columns.\ngroup_by(): get aggregate statisitics by a category\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nYou can also load dplyr by loading the tidyverse package; this will load all the packages in in `tidyverse at once. This is useful, for example, when you want to clean and visualise data:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.2 ‚îÄ‚îÄ\n‚úî ggplot2 3.4.1     ‚úî purrr   1.0.1\n‚úî tibble  3.1.8     ‚úî stringr 1.5.0\n‚úî tidyr   1.3.0     ‚úî forcats 1.0.0\n‚úî readr   2.1.4     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n\n\nNote that you will net to install tidyverse if you did not install it from the previous section:\n\n\nWarning: package 'tidyverse' is in use and will not be installed\n\n\nLet us load the gapminder dataset that we used from the previous week. If you did not install, you will need to do so.\n\nlibrary(gapminder)\n\nThan assign it to the object, gapminder, using the &lt;- operator:\n\ngapminder &lt;- gapminder\n\nWrite the following code to change the country and continent from factor to character, I will explain this in the next chapter:\n\ngapminder$country &lt;- as.character(gapminder$country)\n\ngapminder$continent &lt;- as.character(gapminder$continent)\n\nNow you have an object, which is a dataframe, called gapminder, you can see it in the Environment pane in RStudio. It shows that it has ncol(gapminder) columns/variables and nrow(gapminder) observations/rows\n\n\ngapminder dataframe in Environment pane\n\nYou can use the str() fucntion to get the structure of the dataframe:\n\nstr(gapminder)\n\ntibble [1,704 √ó 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nWe have 6 variables:\n\n‚Äúcountry‚Äù\n‚Äúcontinent‚Äù\n‚Äúyear‚Äù\n‚ÄúlifeExp‚Äù: life expectancy of a country\n‚Äúpop‚Äù: population\n‚ÄúgdpPercap‚Äù: GDP per capita\n\nYou can get a sample of the first observations/rows using head() function:\n\nhead(gapminder)\n\n# A tibble: 6 √ó 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\nWe may be interested in some of the columns in the gampminder dataframe, let say, for example, ‚Äúcountry‚Äù and ‚Äúpop‚Äù variables and discard others; we use the select() function:\n\nlibrary(dplyr)\nselect(gapminder, \"country\", \"pop\")\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nR return only the country and population variables. select() function only return the variables/columns we are interested in:\n\n\nThe best way to work with R, esepcially tidyverse, is using the pipe (|&gt;) operator. The pipe connect various tasks, for example:\n\ngapminder |&gt;\n  select(country, pop)\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nThe pipe chains your operations. It says:\n\nTake gapminder dataframe\nThen using the select() function to select only pop and country columns\n\nYou will that pipe becomes important when having multiple chains of functions at once.\nYou will notice that in other sources: web, books, etc. have %&gt;% instead of |&gt;. It works the same way. The |&gt; is new. %&gt;% comes from mgttr, an external package, so you needed to load it first before using it. The native pipe |&gt; is built in R, so it there is no need to load it. So, we will stick with the |&gt;.\nIn your RStudio, follow these instructions:\n\nGo to ‚ÄòTools‚Äô and click on ‚ÄòGlobal Options‚Äô\nNavigate to ‚ÄòCode‚Äô on the left pane\nThen select the fourth option, ‚Äúuse native pipe operator, |&gt;‚Äù\nClick ‚ÄòApply‚Äô\n\nYou can use the short cut Ctrl + Shift + M If you using Windows to insert the pipe instead of typing it. If you are using Mac, use Cmd + Shift + M.\n\nAs I have said, select() only return the columns specified\n\ngapminder %&gt;% \n  select(country, pop)\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nAlso, notice that we selected ‚Äúcountry‚Äô and‚Äùpop‚Äù columns but did not save them and assigned to an object. To store the results into an object, we have to use assignment operator (&lt;-):\n\ngapminder_selected &lt;- gapminder |&gt;\n  select(country, pop)\n\ngapminder_selected # print\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nNow we have saved results as gapminder_selected, and we can do other analysis with this object because we have saved it. So, in a nutshell, when you run a code without assigning results into an object, using the &lt;- operator, results will not be saved but will be printed.\nYou can also select columns based by index/position. Let us select only 1st and 3rd coulmns\n\ngapminder |&gt; \n  select(1, 3)\n\n# A tibble: 1,704 √ó 2\n   country      year\n   &lt;chr&gt;       &lt;int&gt;\n 1 Afghanistan  1952\n 2 Afghanistan  1957\n 3 Afghanistan  1962\n 4 Afghanistan  1967\n 5 Afghanistan  1972\n 6 Afghanistan  1977\n 7 Afghanistan  1982\n 8 Afghanistan  1987\n 9 Afghanistan  1992\n10 Afghanistan  1997\n# ‚Ñπ 1,694 more rows\n\n\nOr you can select a range of columns\n\ngapminder |&gt; \n  select(country:year)\n\n# A tibble: 1,704 √ó 3\n   country     continent  year\n   &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;\n 1 Afghanistan Asia       1952\n 2 Afghanistan Asia       1957\n 3 Afghanistan Asia       1962\n 4 Afghanistan Asia       1967\n 5 Afghanistan Asia       1972\n 6 Afghanistan Asia       1977\n 7 Afghanistan Asia       1982\n 8 Afghanistan Asia       1987\n 9 Afghanistan Asia       1992\n10 Afghanistan Asia       1997\n# ‚Ñπ 1,694 more rows\n\n\nHere, we have select columns from country to year only.\nYou can also exclude certain columns by simply adding the minus (-) sign; let say we want to exclude the gdpPercap from the dataframe\n\ngapminder |&gt; \n  select(-gdpPercap)\n\n# A tibble: 1,704 √ó 5\n   country     continent  year lifeExp      pop\n   &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;\n 1 Afghanistan Asia       1952    28.8  8425333\n 2 Afghanistan Asia       1957    30.3  9240934\n 3 Afghanistan Asia       1962    32.0 10267083\n 4 Afghanistan Asia       1967    34.0 11537966\n 5 Afghanistan Asia       1972    36.1 13079460\n 6 Afghanistan Asia       1977    38.4 14880372\n 7 Afghanistan Asia       1982    39.9 12881816\n 8 Afghanistan Asia       1987    40.8 13867957\n 9 Afghanistan Asia       1992    41.7 16317921\n10 Afghanistan Asia       1997    41.8 22227415\n# ‚Ñπ 1,694 more rows\n\n\n\nYou may be interested in observations/rows that meet certain conditions. We use filter() function to return the list that meet our conditions. filter() has several operators:\n\n==: equal to\n!=: not equal to\n&gt;: greater than\n&lt;: less than\n&gt;=: greater than or equal to\n&lt;=: less than or equal to\n\nLet us filter based on the continent column. How many continent are there? Create a basic table first\n\ntable(gapminder$continent)\n\n\n  Africa Americas     Asia   Europe  Oceania \n     624      300      396      360       24 \n\n\nThere are five continents. Let us filter only observations from the African continent:\n\nafrica_gapminder &lt;- gapminder |&gt; \n  filter(continent == \"Africa\")\n\nafrica_gapminder  # print \n\n# A tibble: 624 √ó 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ‚Ñπ 614 more rows\n\n\nafrica_gapminder object is a dataframe we have just created, with only countries from the African continent. What filter() does is to return observations/rows that only meet our conditions:\n\nLet us filter a numeric column; for example, we may want to filter countries with population of above 50 million and assign results to an object named high_pop:\n\nhigh_pop &lt;- gapminder |&gt; \n  filter(pop &gt; 50000000)\n\nhigh_pop ## print\n\n# A tibble: 190 √ó 6\n   country    continent  year lifeExp       pop gdpPercap\n   &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Bangladesh Asia       1957    39.3  51365468      662.\n 2 Bangladesh Asia       1962    41.2  56839289      686.\n 3 Bangladesh Asia       1967    43.5  62821884      721.\n 4 Bangladesh Asia       1972    45.3  70759295      630.\n 5 Bangladesh Asia       1977    46.9  80428306      660.\n 6 Bangladesh Asia       1982    50.0  93074406      677.\n 7 Bangladesh Asia       1987    52.8 103764241      752.\n 8 Bangladesh Asia       1992    56.0 113704579      838.\n 9 Bangladesh Asia       1997    59.4 123315288      973.\n10 Bangladesh Asia       2002    62.0 135656790     1136.\n# ‚Ñπ 180 more rows\n\n\nYou can also combine 2 conditions. Let us say we want:\n\ncountries in Africa\nthe year 2007\n\n\nafrica_2007 &lt;- gapminder |&gt; \n  filter(continent == \"Africa\", year == 2007)\n\nFilter rows from the Africa OR Asia\n\ngapminder |&gt; \n  filter(continent == \"Africa\" | continent == \"Asia\")\n\n# A tibble: 1,020 √ó 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ‚Ñπ 1,010 more rows\n\n\nSometimes you may need to filter multiple rows, let say, more than 5 countries. It would be inconvinient to type country == \"...\" five times. This is where the %in% operator is useful:\n\nafrica_2007 |&gt; \n  filter(country %in% c(\"South Africa\", \"Zimbabwe\", \"Ghana\", \"Tanzania\", \"Tunisia\"))\n\n# A tibble: 5 √ó 6\n  country      continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Ghana        Africa     2007    60.0 22873338     1328.\n2 South Africa Africa     2007    49.3 43997828     9270.\n3 Tanzania     Africa     2007    52.5 38139640     1107.\n4 Tunisia      Africa     2007    73.9 10276158     7093.\n5 Zimbabwe     Africa     2007    43.5 12311143      470.\n\n\n\narrange() function is self-explanatory: it sort values into ascending or descending order\n\nafrica_2007 |&gt; \n  arrange(lifeExp) |&gt; \n  head(n = 10) ## show the first 10 observations\n\n# A tibble: 10 √ó 6\n   country                  continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;                    &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Swaziland                Africa     2007    39.6  1133066     4513.\n 2 Mozambique               Africa     2007    42.1 19951656      824.\n 3 Zambia                   Africa     2007    42.4 11746035     1271.\n 4 Sierra Leone             Africa     2007    42.6  6144562      863.\n 5 Lesotho                  Africa     2007    42.6  2012649     1569.\n 6 Angola                   Africa     2007    42.7 12420476     4797.\n 7 Zimbabwe                 Africa     2007    43.5 12311143      470.\n 8 Central African Republic Africa     2007    44.7  4369038      706.\n 9 Liberia                  Africa     2007    45.7  3193942      415.\n10 Rwanda                   Africa     2007    46.2  8860588      863.\n\n\nThe default sorting is ascending order; you can sort into descending order by using desc() function within arrange():\n\nafrica_2007 |&gt; \n  arrange(desc(lifeExp)) |&gt; \n  head(n = 10) ## show the first 10 observations\n\n# A tibble: 10 √ó 6\n   country               continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Reunion               Africa     2007    76.4   798094     7670.\n 2 Libya                 Africa     2007    74.0  6036914    12057.\n 3 Tunisia               Africa     2007    73.9 10276158     7093.\n 4 Mauritius             Africa     2007    72.8  1250882    10957.\n 5 Algeria               Africa     2007    72.3 33333216     6223.\n 6 Egypt                 Africa     2007    71.3 80264543     5581.\n 7 Morocco               Africa     2007    71.2 33757175     3820.\n 8 Sao Tome and Principe Africa     2007    65.5   199579     1598.\n 9 Comoros               Africa     2007    65.2   710960      986.\n10 Mauritania            Africa     2007    64.2  3270065     1803.\n\n\n\nWe use the summarise() function to get the summary statistics. Common statistics include mean, median, standard deviation, minimum, maximum, etc.\n\ngapminder |&gt; \n  summarise(mean_life_exp = mean(lifeExp))\n\n# A tibble: 1 √ó 1\n  mean_life_exp\n          &lt;dbl&gt;\n1          59.5\n\n\nStandard deviation:\n\ngapminder |&gt; \n  summarise(sd_life_exp = sd(lifeExp))\n\n# A tibble: 1 √ó 1\n  sd_life_exp\n        &lt;dbl&gt;\n1        12.9\n\n\nYou can get various summary statistics by combing multiple arguments within summarise():\n\ngapminder |&gt; \n  summarise(mean_life_exp = mean(lifeExp),   \n            sd_life_exp = sd(lifeExp),\n            min_life_exp = min(lifeExp),\n            max_life_exp = max(lifeExp))\n\n# A tibble: 1 √ó 4\n  mean_life_exp sd_life_exp min_life_exp max_life_exp\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1          59.5        12.9         23.6         82.6\n\n\nMagic!\n\nIn many instances we are interested in aggregate statistics, that is, summary statistics by a category. Say you want to group rows by the continent column then get the use summarise() to get average GDP per capita for each continent. This is where the group() function is useful:\n\n## First create a dataframe of the year 2007 only\n\ngapminder_2007 &lt;- gapminder |&gt; \n  filter(year == 2007)\n\n## Then use group_by()\n\ngapminder_2007 |&gt; \n  group_by(continent) |&gt; \n  summarise(gdp_continent = mean(gdpPercap)) |&gt; \n  arrange(desc(gdp_continent))  ## arrange by gdp_continent into descending\n\n# A tibble: 5 √ó 2\n  continent gdp_continent\n  &lt;chr&gt;             &lt;dbl&gt;\n1 Oceania          29810.\n2 Europe           25054.\n3 Asia             12473.\n4 Americas         11003.\n5 Africa            3089.\n\n\n\nmutate create new columns based on the existing columns. In most cases we want to transform the data. For example, we know that the GDP per capita is calculated from dividing the total GDP by a population. We may want to create a new column named gdp_total with a formula (gdp_total = gdpPercap * pop). We can use mutate():\n\ngapminder_2007 &lt;- gapminder_2007 |&gt; \n  mutate(gdp_total = gdpPercap * pop)\n\nhead(gapminder_2007)\n\n# A tibble: 6 √ó 7\n  country     continent  year lifeExp      pop gdpPercap     gdp_total\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 Afghanistan Asia       2007    43.8 31889923      975.  31079291949.\n2 Albania     Europe     2007    76.4  3600523     5937.  21376411360.\n3 Algeria     Africa     2007    72.3 33333216     6223. 207444851958.\n4 Angola      Africa     2007    42.7 12420476     4797.  59583895818.\n5 Argentina   Americas   2007    75.3 40301927    12779. 515033625357.\n6 Australia   Oceania    2007    81.2 20434176    34435. 703658358894.\n\n\nYou can see that the new column named gdp_total has been added.\nYou can also combine multiple arguments within mutate():\n\ngapminder_2007 &lt;- gapminder_2007 |&gt; \n  mutate(gdp_total = gdpPercap * pop,\n         life_exp_squared = lifeExp ** 2)\n\n\nThe pipe operator is very useful. You can chain multiple operations into a single code. Let say we want to do the following:\n\nFind country called South Africa\nfind average life expectancy by year\nArrange by year into a descending order\n\n\ngapminder |&gt; \n  filter(country == \"South Africa\") |&gt; \n  group_by(year) |&gt; \n  summarise(life_exp = mean(lifeExp)) |&gt; \n  arrange(desc(year))\n\n# A tibble: 12 √ó 2\n    year life_exp\n   &lt;int&gt;    &lt;dbl&gt;\n 1  2007     49.3\n 2  2002     53.4\n 3  1997     60.2\n 4  1992     61.9\n 5  1987     60.8\n 6  1982     58.2\n 7  1977     55.5\n 8  1972     53.7\n 9  1967     51.9\n10  1962     50.0\n11  1957     48.0\n12  1952     45.0\n\n\nYou can take it even further by creating a plot. You know that BRICS countries are Brazil, Russia, India, China and South Africa. You want to find trends in life expectancy. Note that there is no data for Russia\n\ngapminder |&gt; \n  filter(country %in% c(\"Brazil\", \"Russia\", \"India\", \"China\", \"South Africa\")) |&gt; \n  select(country, year, lifeExp) |&gt; \n  ggplot(aes(x = year, y = lifeExp, colour = country)) +\n  geom_line(linewidth = 1.5) +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1950, 1960, 1980, 1990, 2000, 2007)) +\n  theme(legend.position = \"bottom\",\n        panel.grid.minor = element_blank()) +\n  labs(title = \"Trends in life expectancy of BRICS country\",\n       x = \"\",\n       y = \"Life expectancy (in years)\",\n       caption = \"Data source: Gapminder\")\n\n\n\n\nWait a minute: why did south Africa‚Äôs life expectancy started to decline rapidly from the 1990s? One plausible reason would be the impact of HIV/AIDS and lack of antiretrovirals (ARVs). Welcome to data analysis.\nYou can see above the efficiency of the pipe operator. Think of the pipe operator as:\n\nOR\n\nWe have introduced to the basics of data manipulation in R using the dplyr package in R. While we have covered a lot, the path is long. However, once you master these basic functions, you will not struggle in the following sections. These resources may be helpful:\n\nR for Data Science. Chapter 4\nData transformation with dplyr"
  },
  {
    "objectID": "weeks/week-3.html#learning-objectives",
    "href": "weeks/week-3.html#learning-objectives",
    "title": "4 Data Wrangling and Manipulation",
    "section": "",
    "text": "Understand dataframes\nManipulate, transform and analyse dataframes"
  },
  {
    "objectID": "weeks/week-3.html#introduction",
    "href": "weeks/week-3.html#introduction",
    "title": "4 Data Wrangling and Manipulation",
    "section": "",
    "text": "Dataframes, as we saw the previous section, is a tabular data format, with columns and rows. Columns are variable names and rows are individual observations.\nLet us a basic data frame with three columns: country, life expectancy, and population of Southern African countries. First, we create individual vectors:\n\n# Create a character vector\ncountry_name &lt;- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\ncountry_name\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\n## Create a numeric vector\n\nlife_expectancy &lt;- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\nlife_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n## create another numeric vector\n\npopulation &lt;- c(34500000, 2590000, 228000, 19890000, 32080000,  2530000, 59390000, 1190000, 19470000, 1599000)\n\nBecause we have 3 vectors of equal length, we can create a dataframe, using a data.frame() function:\n\nsouthern_africa_df &lt;- data.frame(country_name, life_expectancy, population) #combine two vectors to create a dataframe\n\nsouthern_africa_df ## print the dataframe\n\n   country_name life_expectancy population\n1        Angola            61.6   34500000\n2      Botswana            61.1    2590000\n3       Lesotho            57.1     228000\n4        Malawi            53.1   19890000\n5    Mozambique            62.9   32080000\n6       Namibia            59.3    2530000\n7  South Africa            59.3   59390000\n8     Swaziland            62.3    1190000\n9        Zambia            61.2   19470000\n10     Zimbabwe            59.3    1599000\n\n\nA dataframe is basically made of vectors (columns). In the southern_africa_df dataframe, we have 3 columns: country_name, life_expectancy population. We can extract these elements using the $ sign:\n\nsouthern_africa_df$country_name\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\nsouthern_africa_df$life_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\nsouthern_africa_df$population\n\n [1] 34500000  2590000   228000 19890000 32080000  2530000 59390000  1190000\n [9] 19470000  1599000"
  },
  {
    "objectID": "weeks/week-3.html#using-dplyr",
    "href": "weeks/week-3.html#using-dplyr",
    "title": "4 Data Wrangling and Manipulation",
    "section": "",
    "text": "We will use the dplyr package to manipulate data. dplyr is part of tidyverse meta-package and is mostly used to clean, manipulate and transform dataframes. dplyr has 5 main verbs/functions:\n\nselect(): for selecting particular columns in a dataframe\nfilter(): for sub-setting rows based on the specified criteria\narrange(): sort rows/observations based (ascending/descending)\nsummarise(): for summary statistics\nmutate(): create new columns based on the manipulation of the existing columns.\ngroup_by(): get aggregate statisitics by a category\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nYou can also load dplyr by loading the tidyverse package; this will load all the packages in in `tidyverse at once. This is useful, for example, when you want to clean and visualise data:\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.2 ‚îÄ‚îÄ\n‚úî ggplot2 3.4.1     ‚úî purrr   1.0.1\n‚úî tibble  3.1.8     ‚úî stringr 1.5.0\n‚úî tidyr   1.3.0     ‚úî forcats 1.0.0\n‚úî readr   2.1.4     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n\n\nNote that you will net to install tidyverse if you did not install it from the previous section:\n\n\nWarning: package 'tidyverse' is in use and will not be installed\n\n\nLet us load the gapminder dataset that we used from the previous week. If you did not install, you will need to do so.\n\nlibrary(gapminder)\n\nThan assign it to the object, gapminder, using the &lt;- operator:\n\ngapminder &lt;- gapminder\n\nWrite the following code to change the country and continent from factor to character, I will explain this in the next chapter:\n\ngapminder$country &lt;- as.character(gapminder$country)\n\ngapminder$continent &lt;- as.character(gapminder$continent)\n\nNow you have an object, which is a dataframe, called gapminder, you can see it in the Environment pane in RStudio. It shows that it has ncol(gapminder) columns/variables and nrow(gapminder) observations/rows\n\n\ngapminder dataframe in Environment pane\n\nYou can use the str() fucntion to get the structure of the dataframe:\n\nstr(gapminder)\n\ntibble [1,704 √ó 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nWe have 6 variables:\n\n‚Äúcountry‚Äù\n‚Äúcontinent‚Äù\n‚Äúyear‚Äù\n‚ÄúlifeExp‚Äù: life expectancy of a country\n‚Äúpop‚Äù: population\n‚ÄúgdpPercap‚Äù: GDP per capita\n\nYou can get a sample of the first observations/rows using head() function:\n\nhead(gapminder)\n\n# A tibble: 6 √ó 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\nWe may be interested in some of the columns in the gampminder dataframe, let say, for example, ‚Äúcountry‚Äù and ‚Äúpop‚Äù variables and discard others; we use the select() function:\n\nlibrary(dplyr)\nselect(gapminder, \"country\", \"pop\")\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nR return only the country and population variables. select() function only return the variables/columns we are interested in:\n\n\nThe best way to work with R, esepcially tidyverse, is using the pipe (|&gt;) operator. The pipe connect various tasks, for example:\n\ngapminder |&gt;\n  select(country, pop)\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nThe pipe chains your operations. It says:\n\nTake gapminder dataframe\nThen using the select() function to select only pop and country columns\n\nYou will that pipe becomes important when having multiple chains of functions at once.\nYou will notice that in other sources: web, books, etc. have %&gt;% instead of |&gt;. It works the same way. The |&gt; is new. %&gt;% comes from mgttr, an external package, so you needed to load it first before using it. The native pipe |&gt; is built in R, so it there is no need to load it. So, we will stick with the |&gt;.\nIn your RStudio, follow these instructions:\n\nGo to ‚ÄòTools‚Äô and click on ‚ÄòGlobal Options‚Äô\nNavigate to ‚ÄòCode‚Äô on the left pane\nThen select the fourth option, ‚Äúuse native pipe operator, |&gt;‚Äù\nClick ‚ÄòApply‚Äô\n\nYou can use the short cut Ctrl + Shift + M If you using Windows to insert the pipe instead of typing it. If you are using Mac, use Cmd + Shift + M.\n\nAs I have said, select() only return the columns specified\n\ngapminder %&gt;% \n  select(country, pop)\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nAlso, notice that we selected ‚Äúcountry‚Äô and‚Äùpop‚Äù columns but did not save them and assigned to an object. To store the results into an object, we have to use assignment operator (&lt;-):\n\ngapminder_selected &lt;- gapminder |&gt;\n  select(country, pop)\n\ngapminder_selected # print\n\n# A tibble: 1,704 √ó 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ‚Ñπ 1,694 more rows\n\n\nNow we have saved results as gapminder_selected, and we can do other analysis with this object because we have saved it. So, in a nutshell, when you run a code without assigning results into an object, using the &lt;- operator, results will not be saved but will be printed.\nYou can also select columns based by index/position. Let us select only 1st and 3rd coulmns\n\ngapminder |&gt; \n  select(1, 3)\n\n# A tibble: 1,704 √ó 2\n   country      year\n   &lt;chr&gt;       &lt;int&gt;\n 1 Afghanistan  1952\n 2 Afghanistan  1957\n 3 Afghanistan  1962\n 4 Afghanistan  1967\n 5 Afghanistan  1972\n 6 Afghanistan  1977\n 7 Afghanistan  1982\n 8 Afghanistan  1987\n 9 Afghanistan  1992\n10 Afghanistan  1997\n# ‚Ñπ 1,694 more rows\n\n\nOr you can select a range of columns\n\ngapminder |&gt; \n  select(country:year)\n\n# A tibble: 1,704 √ó 3\n   country     continent  year\n   &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;\n 1 Afghanistan Asia       1952\n 2 Afghanistan Asia       1957\n 3 Afghanistan Asia       1962\n 4 Afghanistan Asia       1967\n 5 Afghanistan Asia       1972\n 6 Afghanistan Asia       1977\n 7 Afghanistan Asia       1982\n 8 Afghanistan Asia       1987\n 9 Afghanistan Asia       1992\n10 Afghanistan Asia       1997\n# ‚Ñπ 1,694 more rows\n\n\nHere, we have select columns from country to year only.\nYou can also exclude certain columns by simply adding the minus (-) sign; let say we want to exclude the gdpPercap from the dataframe\n\ngapminder |&gt; \n  select(-gdpPercap)\n\n# A tibble: 1,704 √ó 5\n   country     continent  year lifeExp      pop\n   &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;\n 1 Afghanistan Asia       1952    28.8  8425333\n 2 Afghanistan Asia       1957    30.3  9240934\n 3 Afghanistan Asia       1962    32.0 10267083\n 4 Afghanistan Asia       1967    34.0 11537966\n 5 Afghanistan Asia       1972    36.1 13079460\n 6 Afghanistan Asia       1977    38.4 14880372\n 7 Afghanistan Asia       1982    39.9 12881816\n 8 Afghanistan Asia       1987    40.8 13867957\n 9 Afghanistan Asia       1992    41.7 16317921\n10 Afghanistan Asia       1997    41.8 22227415\n# ‚Ñπ 1,694 more rows\n\n\n\nYou may be interested in observations/rows that meet certain conditions. We use filter() function to return the list that meet our conditions. filter() has several operators:\n\n==: equal to\n!=: not equal to\n&gt;: greater than\n&lt;: less than\n&gt;=: greater than or equal to\n&lt;=: less than or equal to\n\nLet us filter based on the continent column. How many continent are there? Create a basic table first\n\ntable(gapminder$continent)\n\n\n  Africa Americas     Asia   Europe  Oceania \n     624      300      396      360       24 \n\n\nThere are five continents. Let us filter only observations from the African continent:\n\nafrica_gapminder &lt;- gapminder |&gt; \n  filter(continent == \"Africa\")\n\nafrica_gapminder  # print \n\n# A tibble: 624 √ó 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ‚Ñπ 614 more rows\n\n\nafrica_gapminder object is a dataframe we have just created, with only countries from the African continent. What filter() does is to return observations/rows that only meet our conditions:\n\nLet us filter a numeric column; for example, we may want to filter countries with population of above 50 million and assign results to an object named high_pop:\n\nhigh_pop &lt;- gapminder |&gt; \n  filter(pop &gt; 50000000)\n\nhigh_pop ## print\n\n# A tibble: 190 √ó 6\n   country    continent  year lifeExp       pop gdpPercap\n   &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Bangladesh Asia       1957    39.3  51365468      662.\n 2 Bangladesh Asia       1962    41.2  56839289      686.\n 3 Bangladesh Asia       1967    43.5  62821884      721.\n 4 Bangladesh Asia       1972    45.3  70759295      630.\n 5 Bangladesh Asia       1977    46.9  80428306      660.\n 6 Bangladesh Asia       1982    50.0  93074406      677.\n 7 Bangladesh Asia       1987    52.8 103764241      752.\n 8 Bangladesh Asia       1992    56.0 113704579      838.\n 9 Bangladesh Asia       1997    59.4 123315288      973.\n10 Bangladesh Asia       2002    62.0 135656790     1136.\n# ‚Ñπ 180 more rows\n\n\nYou can also combine 2 conditions. Let us say we want:\n\ncountries in Africa\nthe year 2007\n\n\nafrica_2007 &lt;- gapminder |&gt; \n  filter(continent == \"Africa\", year == 2007)\n\nFilter rows from the Africa OR Asia\n\ngapminder |&gt; \n  filter(continent == \"Africa\" | continent == \"Asia\")\n\n# A tibble: 1,020 √ó 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ‚Ñπ 1,010 more rows\n\n\nSometimes you may need to filter multiple rows, let say, more than 5 countries. It would be inconvinient to type country == \"...\" five times. This is where the %in% operator is useful:\n\nafrica_2007 |&gt; \n  filter(country %in% c(\"South Africa\", \"Zimbabwe\", \"Ghana\", \"Tanzania\", \"Tunisia\"))\n\n# A tibble: 5 √ó 6\n  country      continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;        &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Ghana        Africa     2007    60.0 22873338     1328.\n2 South Africa Africa     2007    49.3 43997828     9270.\n3 Tanzania     Africa     2007    52.5 38139640     1107.\n4 Tunisia      Africa     2007    73.9 10276158     7093.\n5 Zimbabwe     Africa     2007    43.5 12311143      470.\n\n\n\narrange() function is self-explanatory: it sort values into ascending or descending order\n\nafrica_2007 |&gt; \n  arrange(lifeExp) |&gt; \n  head(n = 10) ## show the first 10 observations\n\n# A tibble: 10 √ó 6\n   country                  continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;                    &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Swaziland                Africa     2007    39.6  1133066     4513.\n 2 Mozambique               Africa     2007    42.1 19951656      824.\n 3 Zambia                   Africa     2007    42.4 11746035     1271.\n 4 Sierra Leone             Africa     2007    42.6  6144562      863.\n 5 Lesotho                  Africa     2007    42.6  2012649     1569.\n 6 Angola                   Africa     2007    42.7 12420476     4797.\n 7 Zimbabwe                 Africa     2007    43.5 12311143      470.\n 8 Central African Republic Africa     2007    44.7  4369038      706.\n 9 Liberia                  Africa     2007    45.7  3193942      415.\n10 Rwanda                   Africa     2007    46.2  8860588      863.\n\n\nThe default sorting is ascending order; you can sort into descending order by using desc() function within arrange():\n\nafrica_2007 |&gt; \n  arrange(desc(lifeExp)) |&gt; \n  head(n = 10) ## show the first 10 observations\n\n# A tibble: 10 √ó 6\n   country               continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Reunion               Africa     2007    76.4   798094     7670.\n 2 Libya                 Africa     2007    74.0  6036914    12057.\n 3 Tunisia               Africa     2007    73.9 10276158     7093.\n 4 Mauritius             Africa     2007    72.8  1250882    10957.\n 5 Algeria               Africa     2007    72.3 33333216     6223.\n 6 Egypt                 Africa     2007    71.3 80264543     5581.\n 7 Morocco               Africa     2007    71.2 33757175     3820.\n 8 Sao Tome and Principe Africa     2007    65.5   199579     1598.\n 9 Comoros               Africa     2007    65.2   710960      986.\n10 Mauritania            Africa     2007    64.2  3270065     1803.\n\n\n\nWe use the summarise() function to get the summary statistics. Common statistics include mean, median, standard deviation, minimum, maximum, etc.\n\ngapminder |&gt; \n  summarise(mean_life_exp = mean(lifeExp))\n\n# A tibble: 1 √ó 1\n  mean_life_exp\n          &lt;dbl&gt;\n1          59.5\n\n\nStandard deviation:\n\ngapminder |&gt; \n  summarise(sd_life_exp = sd(lifeExp))\n\n# A tibble: 1 √ó 1\n  sd_life_exp\n        &lt;dbl&gt;\n1        12.9\n\n\nYou can get various summary statistics by combing multiple arguments within summarise():\n\ngapminder |&gt; \n  summarise(mean_life_exp = mean(lifeExp),   \n            sd_life_exp = sd(lifeExp),\n            min_life_exp = min(lifeExp),\n            max_life_exp = max(lifeExp))\n\n# A tibble: 1 √ó 4\n  mean_life_exp sd_life_exp min_life_exp max_life_exp\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1          59.5        12.9         23.6         82.6\n\n\nMagic!\n\nIn many instances we are interested in aggregate statistics, that is, summary statistics by a category. Say you want to group rows by the continent column then get the use summarise() to get average GDP per capita for each continent. This is where the group() function is useful:\n\n## First create a dataframe of the year 2007 only\n\ngapminder_2007 &lt;- gapminder |&gt; \n  filter(year == 2007)\n\n## Then use group_by()\n\ngapminder_2007 |&gt; \n  group_by(continent) |&gt; \n  summarise(gdp_continent = mean(gdpPercap)) |&gt; \n  arrange(desc(gdp_continent))  ## arrange by gdp_continent into descending\n\n# A tibble: 5 √ó 2\n  continent gdp_continent\n  &lt;chr&gt;             &lt;dbl&gt;\n1 Oceania          29810.\n2 Europe           25054.\n3 Asia             12473.\n4 Americas         11003.\n5 Africa            3089.\n\n\n\nmutate create new columns based on the existing columns. In most cases we want to transform the data. For example, we know that the GDP per capita is calculated from dividing the total GDP by a population. We may want to create a new column named gdp_total with a formula (gdp_total = gdpPercap * pop). We can use mutate():\n\ngapminder_2007 &lt;- gapminder_2007 |&gt; \n  mutate(gdp_total = gdpPercap * pop)\n\nhead(gapminder_2007)\n\n# A tibble: 6 √ó 7\n  country     continent  year lifeExp      pop gdpPercap     gdp_total\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 Afghanistan Asia       2007    43.8 31889923      975.  31079291949.\n2 Albania     Europe     2007    76.4  3600523     5937.  21376411360.\n3 Algeria     Africa     2007    72.3 33333216     6223. 207444851958.\n4 Angola      Africa     2007    42.7 12420476     4797.  59583895818.\n5 Argentina   Americas   2007    75.3 40301927    12779. 515033625357.\n6 Australia   Oceania    2007    81.2 20434176    34435. 703658358894.\n\n\nYou can see that the new column named gdp_total has been added.\nYou can also combine multiple arguments within mutate():\n\ngapminder_2007 &lt;- gapminder_2007 |&gt; \n  mutate(gdp_total = gdpPercap * pop,\n         life_exp_squared = lifeExp ** 2)\n\n\nThe pipe operator is very useful. You can chain multiple operations into a single code. Let say we want to do the following:\n\nFind country called South Africa\nfind average life expectancy by year\nArrange by year into a descending order\n\n\ngapminder |&gt; \n  filter(country == \"South Africa\") |&gt; \n  group_by(year) |&gt; \n  summarise(life_exp = mean(lifeExp)) |&gt; \n  arrange(desc(year))\n\n# A tibble: 12 √ó 2\n    year life_exp\n   &lt;int&gt;    &lt;dbl&gt;\n 1  2007     49.3\n 2  2002     53.4\n 3  1997     60.2\n 4  1992     61.9\n 5  1987     60.8\n 6  1982     58.2\n 7  1977     55.5\n 8  1972     53.7\n 9  1967     51.9\n10  1962     50.0\n11  1957     48.0\n12  1952     45.0\n\n\nYou can take it even further by creating a plot. You know that BRICS countries are Brazil, Russia, India, China and South Africa. You want to find trends in life expectancy. Note that there is no data for Russia\n\ngapminder |&gt; \n  filter(country %in% c(\"Brazil\", \"Russia\", \"India\", \"China\", \"South Africa\")) |&gt; \n  select(country, year, lifeExp) |&gt; \n  ggplot(aes(x = year, y = lifeExp, colour = country)) +\n  geom_line(linewidth = 1.5) +\n  theme_minimal() +\n  scale_x_continuous(breaks = c(1950, 1960, 1980, 1990, 2000, 2007)) +\n  theme(legend.position = \"bottom\",\n        panel.grid.minor = element_blank()) +\n  labs(title = \"Trends in life expectancy of BRICS country\",\n       x = \"\",\n       y = \"Life expectancy (in years)\",\n       caption = \"Data source: Gapminder\")\n\n\n\n\nWait a minute: why did south Africa‚Äôs life expectancy started to decline rapidly from the 1990s? One plausible reason would be the impact of HIV/AIDS and lack of antiretrovirals (ARVs). Welcome to data analysis.\nYou can see above the efficiency of the pipe operator. Think of the pipe operator as:\n\nOR\n\nWe have introduced to the basics of data manipulation in R using the dplyr package in R. While we have covered a lot, the path is long. However, once you master these basic functions, you will not struggle in the following sections. These resources may be helpful:\n\nR for Data Science. Chapter 4\nData transformation with dplyr"
  },
  {
    "objectID": "weeks/week-5a.html",
    "href": "weeks/week-5a.html",
    "title": "Communicating and Reporting with Quarto",
    "section": "",
    "text": "This week I would like to introduce you to writing reproducible reports using Quarto, a next generation ‚Äúopen-source scientific and technical publishing system‚Äù. It is an integrated ecosystem, where you can integrate your code, reports, figures, references, tables etc. in one environment. With Quarto you can write:\n\nBooks (examples include: R for Data Science, Second dition; Python for Data Analysis Hands-On Programming with R)\nReproducible journal papers: (some examples: Elsevier Template, )\nWebsite: This website is written with Quarto, hosted in GitHub all for free\nPresentations: (examples: This presentation)\nDynamic reports\nBlogs: personal, work etc. (examples: )\n\nAnd more! See examples on the Quarto website\nQuarto can render documents in multiple formats, including HTML, PDF, word formats, etc."
  },
  {
    "objectID": "weeks/week-5a.html#introduction-to-quarto",
    "href": "weeks/week-5a.html#introduction-to-quarto",
    "title": "Communicating and Reporting with Quarto",
    "section": "",
    "text": "This week I would like to introduce you to writing reproducible reports using Quarto, a next generation ‚Äúopen-source scientific and technical publishing system‚Äù. It is an integrated ecosystem, where you can integrate your code, reports, figures, references, tables etc. in one environment. With Quarto you can write:\n\nBooks (examples include: R for Data Science, Second dition; Python for Data Analysis Hands-On Programming with R)\nReproducible journal papers: (some examples: Elsevier Template, )\nWebsite: This website is written with Quarto, hosted in GitHub all for free\nPresentations: (examples: This presentation)\nDynamic reports\nBlogs: personal, work etc. (examples: )\n\nAnd more! See examples on the Quarto website\nQuarto can render documents in multiple formats, including HTML, PDF, word formats, etc."
  },
  {
    "objectID": "weeks/week-5a.html#how-does-quarto-work",
    "href": "weeks/week-5a.html#how-does-quarto-work",
    "title": "Communicating and Reporting with Quarto",
    "section": "5.2 How does Quarto Work?",
    "text": "5.2 How does Quarto Work?\nFor all my writing, I have shifted from what Kieran Healy calls the ‚ÄúOffice Model‚Äù to an ‚ÄúEngineering Model‚Äù:\n\nOffice solutions tend towards a cluster of tools where something like Microsoft Word is at the center of your work. A Word file or set of files is the most ‚Äúreal‚Äù thing in your project. Changes to your work are tracked inside that file or files. Citation and reference managers plug into those files. The outputs of data analyses‚Äîtables, figures‚Äîget cut and pasted in as well, or are kept alongside them. The master document may be passed around from person to person to be edited and updated.4 The final output is exported from it, perhaps to PDF or to HTML, but maybe most often the final output just is the .docx file, cleaned up and with the track changes feature turned off.\n\n\nIn the Engineering model, meanwhile, plain text files are at the center of your work. The most ‚Äúreal‚Äù thing in your project will either be those files or, more likely, the version control repository that stores the project. Changes are tracked outside of files, again using a version control system. Data analysis is managed in code that produces outputs in (ideally) a known and reproducible manner. Citation and reference management will likely also be done in plain text, as with a BibTeX .bib file. Final outputs are assembled from the plain text and turned to .tex, .html, or .pdf using some kind of typesetting or conversion tool. Very often, because of some unavoidable facts about the world, the final output of this kind of solution is also a .docx file.\n\nQuarto then is the part of the ‚Äúengineering model‚Äù. It mainly uses Markdown format for writing. ‚ÄúMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents‚Äù."
  },
  {
    "objectID": "weeks/week-5a.html#lets-practice",
    "href": "weeks/week-5a.html#lets-practice",
    "title": "Communicating and Reporting with Quarto",
    "section": "5.3 Let‚Äôs Practice",
    "text": "5.3 Let‚Äôs Practice\nYou will need the following:\n\nR and RStudio (or any IDE such as VSCode etc)\nQuarto: If you are using RStudio, Quarto is already installed. If you using other IDEs such as VSCode, download and install Quarto from the Quarto website\nZotero: For references bibliography and citations. Download and install Zotero from Zotero website\nBetter BibTeX (BBT): BBT is a Zotero extension that manages things like citation keys. You can download BBT from: https://retorque.re/zotero-better-bibtex/.\n\nAll these tools are open source and available for free!\n\n5.3.1 Openning Quarto\nFirst create a directory/folder where you will save all the files. For example I will create a folder named ‚Äúintro_to_quarto‚Äù in my documents directory. This is where you will store all your files.\nIn RStudio, go to FILE -&gt; New File -&gt; Quarto Document\nOn the pop-up window, just select ‚ÄúCreate Empty Document‚Äù. A blank Quarto page will be open:\n\nSave the document to folder that you have created\n\n\n5.3.2 YAMl\nThe first part of the page is know as YAML, it contains the information about the document, this include:\n\nQuarto YML Options\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ntitle\ntittle of the document\n\n\nsubtitle\nsubtitle of the document\n\n\nauthor\nAuthor\n\n\ndate\ndate of the document was published\n\n\nformat\noutput of the document: options include html, docx, pdf, etc\n\n\ntoc\ntable of contents\n\n\nnumber-sections\nAutomatically number headings and sections\n\n\nbibliography\na file containing references\n\n\ncsl\nreferencing style\n\n\n\n\n\n\n\nThere are many other options that you can use to customise your document; you can a complete guide here. Let us experiment with few options.\nLook how I have customised my yaml:\n\nExperiment with other options. Please not that this must be should start with ‚Äî and end with ‚Äî.\n\n\n5.3.3 Writing using Markdown\n\nHeadings\nYou insert headings by using # at the beginning of a sentence:\n\n\n\nSource: Quarto\n\n\nUpdate your document by including headings as follows:\n---\ntitle: \"Introduction to Quarto\"\nsubtitle: \"Writing Reproducible Documents wih Quarto andd RStudio\"\nauthor: \"Aubrey Mpungose\"\ndate: 04 June 2023\ndate-format: \"DD MMMM YYYY\"\nformat:\n  html:\n    toc: true\n---\n\n# Section 1\n\n\n## Section 1.1 \n\n\n### Section 1.1.1 \n\n\n#### Section 1.1.1.1\n\n\n##### Other section\n\n\n###### Other section\nSave and render the document by clicking on the ‚ÄúRender‚Äù option as highlighted on the image below\n\n\n\nFormating texts\n\n\n\nQuarto website\n\n\nUpdate your document as the following and render the document, obviously your name is not Aubrey Mpungose:\n---\ntitle: \"Introduction to Quarto\"\nsubtitle: \"Writing Reproducible Documents wih Quarto andd RStudio\"\nauthor: \"Aubrey Mpungose\"\ndate: 04 June 2019\ndate-format: \"DD MMMM YYYY\"\nformat:\n  html:\n    toc: true\n---\n\n# 1. Italics\n\nMy name is *Aubrey Mpungose*, I love doing *data science*\n\nI can also format text in _italics_\n\n# 2. Bold \n\nThis is how I format text into **BOLD**\n\n\n# 3. Bold and Italics\n\nI can also format text to be ***Bold and Italic***\n\n\n# 4. Example\n\nMy name is *Aubrey Mpungose*, I love doing _data science_. Some people think markdown syntax is difficult,  but it is not: for example, I can make text to be **Bold**. I can also format text format text to be ***bold and italic***\nThe output will be the following:\n\n\n\n\nFigures/Images\nLet‚Äôs say you have an image named meerkat.png in your folder, update your document with the following:\n\nInsert a picture from the web\n\n![A meerkat](meerkat.png)\nThis will inclde the meerkat image in the document. Note that inside [] is the caption, in my case, ‚ÄúA meerkat‚Äù. You must put parentheses () after with no spaces.\n\n\n\nA meerkat\n\n\nThere are other options for figures including width, length, etc. You can find more from Quarto website.\n\n\nComputation and code\nYou can include R, Python, Javascript and other programming languages code within quarto document. We will show some examples using R and gapminder data that we have been using.\nTo load the gapminder data and the tidyverse package, run the following"
  },
  {
    "objectID": "weeks/week-4.html",
    "href": "weeks/week-4.html",
    "title": "5 Data Manipulation Part 2",
    "section": "",
    "text": "Last week we introduced the basics of data manipulation using dplyr. This week I want u to continue to intermediate data manipulation in dplyr."
  },
  {
    "objectID": "weeks/week-4.html#renaming-columns",
    "href": "weeks/week-4.html#renaming-columns",
    "title": "5 Data Manipulation Part 2",
    "section": "5.1 Renaming columns",
    "text": "5.1 Renaming columns\nYou will notice that the column names in the gapminder dataset do not follow tidy principles. Naming things in a tidy we follow these principles:\n\nNo spaces between characters\nall names should be in lower cases\nonly use underscore (_) to separate characters.\n\nThe tidyverse style guide. In our columns, the column names lifeExp are gdpPercap need to be renamed. We will use rename() function within dplyr:\n\n### Load tidyverse\n\nlibrary(tidyverse)\n\n‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.2 ‚îÄ‚îÄ\n‚úî ggplot2 3.4.1     ‚úî purrr   1.0.1\n‚úî tibble  3.1.8     ‚úî dplyr   1.1.0\n‚úî tidyr   1.3.0     ‚úî stringr 1.5.0\n‚úî readr   2.1.4     ‚úî forcats 1.0.0\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n\n### load the data\n\ngapminder &lt;- gapminder::gapminder\n\ngapminder$country &lt;- as.character(gapminder$country)\n\ngapminder$continent &lt;- as.character(gapminder$continent)\n\nthen use rename() to change column names; we will save the new dataframe as gapminder_new\n\ngapminder_new &lt;- gapminder |&gt; \n  rename(life_expectancy = lifeExp,\n         gdp_per_capita = gdpPercap)\n\nhead(gapminder_new)\n\n# A tibble: 6 √ó 6\n  country     continent  year life_expectancy      pop gdp_per_capita\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;           &lt;dbl&gt;    &lt;int&gt;          &lt;dbl&gt;\n1 Afghanistan Asia       1952            28.8  8425333           779.\n2 Afghanistan Asia       1957            30.3  9240934           821.\n3 Afghanistan Asia       1962            32.0 10267083           853.\n4 Afghanistan Asia       1967            34.0 11537966           836.\n5 Afghanistan Asia       1972            36.1 13079460           740.\n6 Afghanistan Asia       1977            38.4 14880372           786.\n\n\nThe dataframe is updated with changed column names. However, when working with data with many columns, it would be time consuming to change each column. Fortunately, within the package janitor there is function called clean_names that change all the column names into a tidy way. Install the janitor package first:\n\ninstall.packages(\"janitor\")\n\nAfter install it load it: and use the clean_names() function:\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.2.2\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\ngapminder_new &lt;- clean_names(gapminder)\n\nhead(gapminder_new)\n\n# A tibble: 6 √ó 6\n  country     continent  year life_exp      pop gdp_percap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;    &lt;dbl&gt;    &lt;int&gt;      &lt;dbl&gt;\n1 Afghanistan Asia       1952     28.8  8425333       779.\n2 Afghanistan Asia       1957     30.3  9240934       821.\n3 Afghanistan Asia       1962     32.0 10267083       853.\n4 Afghanistan Asia       1967     34.0 11537966       836.\n5 Afghanistan Asia       1972     36.1 13079460       740.\n6 Afghanistan Asia       1977     38.4 14880372       786.\n\n\nSee that untidy column names were changed automatically."
  },
  {
    "objectID": "weeks/week-4.html#converting-column-data-types",
    "href": "weeks/week-4.html#converting-column-data-types",
    "title": "5 Data Manipulation Part 2",
    "section": "5.2 Converting column data types",
    "text": "5.2 Converting column data types\nRemember we discussed 3 data types:\n\ncharacter\nnumeric\nlogical\n\nIn a dataframe, you can find the data type of the column by using class() function\n\nclass(gapminder$country)\n\n[1] \"character\"\n\nclass(gapminder$gdpPercap)\n\n[1] \"numeric\"\n\n\nYou can also use the str() to find the data types of all columns in the dataframe:\n\nstr(gapminder)\n\ntibble [1,704 √ó 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nSometimes you may find that the all values in a column would be saved as character when they are supposed to be numeric. You can change them as using as.numeric() function. Let us simulate some fake data:\n\ngender &lt;- c(\"male\", \"female\", \"female\", \"male\", \"female\")\n\nage &lt;- c(\"18\", \"30\", \"45\", \"21\", \"54\")\n\nexample_df &lt;- data.frame(gender, age)\n\nexample_df\n\n  gender age\n1   male  18\n2 female  30\n3 female  45\n4   male  21\n5 female  54\n\n\nIn the example_df dataframe, you can see that the age column has been stored as character, which doesn‚Äôt make any sense:\n\nstr(example_df$age)\n\n chr [1:5] \"18\" \"30\" \"45\" \"21\" \"54\"\n\n\nConvert this:\n\nexample_df$age &lt;- as.numeric(example_df$age)\n\nstr(example_df$age)\n\n num [1:5] 18 30 45 21 54\n\n\nIf you want to convert it back to character, you can use as.character() function:\n\nexample_df$age &lt;- as.character(example_df$age)\n\nstr(example_df$age)\n\n chr [1:5] \"18\" \"30\" \"45\" \"21\" \"54\"\n\n\nThe only time this will not work is when you try to convert a character column such as gender into numeric; try it. Experiment with converting various column type with the gapminder dataset.\n5.2.1 Factors\nThere is another data type we have not discussed: factors or what may be called categorical data. Factors are like characters, except that they have integers that correspond to characters. In our example_df dataframe, we may want to make the column gender a factor, where 1 = male, 2 = female.\n\nhead(example_df)\n\n  gender age\n1   male  18\n2 female  30\n3 female  45\n4   male  21\n5 female  54\n\nexample_df$gender &lt;- factor(example_df$gender, levels = c(\"male\", \"female\"))\n\nstr(example_df)\n\n'data.frame':   5 obs. of  2 variables:\n $ gender: Factor w/ 2 levels \"male\",\"female\": 1 2 2 1 2\n $ age   : chr  \"18\" \"30\" \"45\" \"21\" ...\n\n\nThe gender column has been changed to factor, with 2 levels.\nLet us try to change the continent column in the gapminder dataset, we will try the dplyr method:\n\ngapminder &lt;- gapminder |&gt; \n  mutate(continent_factor = factor(continent))\n\nstr(gapminder$continent_factor)\n\n Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n\n\nHere we have used mutate() to create a new column named continent_factor that is a factor. It has 5 levels, you can check this using the levels() function:\n\nlevels(gapminder$continent_factor)\n\n[1] \"Africa\"   \"Americas\" \"Asia\"     \"Europe\"   \"Oceania\" \n\n\nCreating new columns instead of changing the existing one is important in some instances, especially when you want to compare the data.\nThe focrcats package within Tidyverse was specifically create for factors, you may want to visit it to learn more about factors."
  },
  {
    "objectID": "weeks/week-4.html#create-a-new-categorical-column-from-a-numeric-column",
    "href": "weeks/week-4.html#create-a-new-categorical-column-from-a-numeric-column",
    "title": "5 Data Manipulation Part 2",
    "section": "5.3 Create a new categorical column from a numeric column",
    "text": "5.3 Create a new categorical column from a numeric column\nIn many cases, we may want to create a new categorical column that takes the conditions from a numeric column. For example, example, in the following ages:\n\n1-12 = child\n13-17 = adolescent\n18-34 = young adults\n35-55 = adults\nOver 55 = older adults\n\nWe can use the case_when() function within mutate() to create this column. Let us generate some fake data;\n\nset.seed(45)\n###simulate a character vector with a length of 50\ngender &lt;- sample(c(\"male\", \"female\"), size = 50, replace = T, prob = c(.45, .55))\n\n\n## simulate a numeric vector, with a length of 50, from ages 1 to 75\nage &lt;- sample(1:75, size = 50)\n\nfake_df &lt;- data.frame(gender, age)\n\nhead(fake_df)\n\n  gender age\n1   male  18\n2 female  11\n3 female  55\n4 female  62\n5 female  67\n6 female  27\n\n\nThen compute a new column:\n\nfake_df &lt;- fake_df |&gt; \n  mutate(age_group = case_when(\n    age &gt;= 1 & age &lt;=12 ~ \"child\",\n    age &gt;= 13 & age &lt;= 17 ~ \"adolescent\",\n    age &gt;= 18 & age &lt;= 34 ~ \"young adult\",\n    age &gt;= 35 & age &lt;= 55 ~ \"adult\",\n    age &gt; 55 ~ \"older adult\"\n  ))\n\nfake_df\n\n   gender age   age_group\n1    male  18 young adult\n2  female  11       child\n3  female  55       adult\n4  female  62 older adult\n5  female  67 older adult\n6  female  27 young adult\n7  female  41       adult\n8    male   6       child\n9  female  10       child\n10 female  51       adult\n11 female  47       adult\n12   male  25 young adult\n13 female  43       adult\n14 female  52       adult\n15 female   9       child\n16 female  31 young adult\n17   male  40       adult\n18 female  20 young adult\n19 female  48       adult\n20 female  35       adult\n21 female  22 young adult\n22 female  66 older adult\n23   male   2       child\n24   male  26 young adult\n25   male   7       child\n26 female  39       adult\n27   male  49       adult\n28   male  33 young adult\n29   male  56 older adult\n30 female  70 older adult\n31 female  12       child\n32 female  64 older adult\n33 female  59 older adult\n34   male  42       adult\n35 female  14  adolescent\n36 female  54       adult\n37   male  17  adolescent\n38 female  29 young adult\n39 female  73 older adult\n40 female  60 older adult\n41 female  57 older adult\n42   male  58 older adult\n43   male   3       child\n44 female  46       adult\n45 female  71 older adult\n46   male   1       child\n47 female  72 older adult\n48   male  63 older adult\n49 female   5       child\n50 female  50       adult\n\n\nPlot the new column:\n\nfake_df |&gt; \n  ggplot(aes(x = age_group)) +\n  geom_bar() +\n  theme_minimal()\n\n\n\n\nWe have created a new column called age_group using the age column.\nExperiment with the gapminder data. We may want to group countries according to their life expectancy based on the following rules:\n\nif life expectancy of a country is lower than the world average, we will classify it as ‚Äòlow life expectancy‚Äô\nif life expectancy of a country is higher than the world average, we will classify it as ‚Äòhigh life expectancy‚Äô\n\nWe will only use observations from the year 2007:\n\ngapminder_2007 &lt;- gapminder |&gt; \n  filter(year == 2007)\n\nCreate a new column:\n\ngapminder_2007 &lt;- gapminder_2007 |&gt; \n  mutate(life_expect_category = case_when(\n    lifeExp &lt; mean(lifeExp) ~ 'low life expectancy',\n    lifeExp &gt; mean(lifeExp) ~ 'high life expectancy'\n  ))\n\nWe have created added a new column called life_expect_category; plot this column:\n\ngapminder_2007 |&gt; \n  ggplot(aes(x = life_expect_category)) +\n  geom_bar() +\n  theme_minimal()"
  }
]