[
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "R Can be downloaded from CRAN, The Comprehensive R Archive Network. Simply go to the CRAN wesbite\nDownload the latest version of R (currently R-4.2.1 ) depending on the operating system of your machine:\n\nWindows\nmacOS\nLinux"
  },
  {
    "objectID": "getting-started.html#installing-r",
    "href": "getting-started.html#installing-r",
    "title": "Getting Started",
    "section": "",
    "text": "R Can be downloaded from CRAN, The Comprehensive R Archive Network. Simply go to the CRAN wesbite\nDownload the latest version of R (currently R-4.2.1 ) depending on the operating system of your machine:\n\nWindows\nmacOS\nLinux"
  },
  {
    "objectID": "getting-started.html#installing-rstudio",
    "href": "getting-started.html#installing-rstudio",
    "title": "Getting Started",
    "section": "1.1 Installing RStudio",
    "text": "1.1 Installing RStudio\nRstudio is an Integrated Development Environment (IDE) that makes it easier working with R. This might be trickier for beginners who are not familiar with programming. Think of R as the engine that makes the car run. RStudio would be additional aesthetics that makes the car look better. You can use R without RStudio to analyse data, but you cannot use RStudio without R. You can download the latest version of RStudio here. Make sure to sure RStudio Desktop\n\n\n\n\n\n\nR console\n\n\n\n\n\n\n\nRStudio\n\n\n\n\n\nIn RStudio, you have 4 panes, the script, where you can write lines of code and save the script for future purposes. On the top-right you have the Environment pane, where we can view the list of objects we have created in R; objects can include tables, datasets, models, plots, etc. On bottom-right, we have a console, it is the typical console we found R. Lastly, the last pane have different components/tabs: files tzb, where we can view the list of files we are connected to or are using; for example, where you stored you dataset. It also has a plot tab, used for viewing plots/graphs."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Workshops for Data Science",
    "section": "",
    "text": "These workshops aim to introduce participants to the foundations of data science using R programming Language. As you advance in our studies and career, you will learn that the ability to collect, clean, transform, analyse and use data for predictive analytics is one of the most needed skills in the labour market. As we live in the digital age, where big data has become a commodity, learning to handle these data systems will be one of the most important investments in your career.\nIn this course, we will be using R for programming and data analysis. R, along with Python, is flexible when working with data, especially large data. Majority of academics, researchers, and students who analyse quantitative data use programs such as SPSS, STATA and Excel, and I have also used them before. I discourage the use of these tools for following reasons. Firstly, they are expensive! Universities spend large sums of money to purchase these licences, which disadvantages students and academics in the developing world. Secondly, We passed the age of SPSS and other Graphic User Interface software, they are very limited. But if you insist on learning them, good for you.\n\nOn the other hand, R and Python are free and come with with ABSOLUTELY NO WARRANTY 😎 . They are very flexible and can handle very large data. They are the dominant programming languages used in the labour market around the world. R and Python have thousands of libraries that can handle and analyse any type of data, including basic data cleaning and wrangling, transforming data, regression, visualisation, text analysis and natural language processing, statistical analysis, machine learning, geospatial analysis and visualisation. In academia, researchers are encouraged to make their research outputs Reproducible, that is, researchers must share code, data and analysis when submitting papers to journals. This is called Reproducible Science.\nBoth R and Python are awesome programming languages. Here, we will use R because I feel there are many libraries that are user friendly in R compared to Python. However, I will also share Python code that correspond with R code. At the end of this course, you will have an option to continue to serious data science stuff."
  },
  {
    "objectID": "index.html#an-invitation-to-r-for-data-science",
    "href": "index.html#an-invitation-to-r-for-data-science",
    "title": "R Workshops for Data Science",
    "section": "",
    "text": "These workshops aim to introduce participants to the foundations of data science using R programming Language. As you advance in our studies and career, you will learn that the ability to collect, clean, transform, analyse and use data for predictive analytics is one of the most needed skills in the labour market. As we live in the digital age, where big data has become a commodity, learning to handle these data systems will be one of the most important investments in your career.\nIn this course, we will be using R for programming and data analysis. R, along with Python, is flexible when working with data, especially large data. Majority of academics, researchers, and students who analyse quantitative data use programs such as SPSS, STATA and Excel, and I have also used them before. I discourage the use of these tools for following reasons. Firstly, they are expensive! Universities spend large sums of money to purchase these licences, which disadvantages students and academics in the developing world. Secondly, We passed the age of SPSS and other Graphic User Interface software, they are very limited. But if you insist on learning them, good for you.\n\nOn the other hand, R and Python are free and come with with ABSOLUTELY NO WARRANTY 😎 . They are very flexible and can handle very large data. They are the dominant programming languages used in the labour market around the world. R and Python have thousands of libraries that can handle and analyse any type of data, including basic data cleaning and wrangling, transforming data, regression, visualisation, text analysis and natural language processing, statistical analysis, machine learning, geospatial analysis and visualisation. In academia, researchers are encouraged to make their research outputs Reproducible, that is, researchers must share code, data and analysis when submitting papers to journals. This is called Reproducible Science.\nBoth R and Python are awesome programming languages. Here, we will use R because I feel there are many libraries that are user friendly in R compared to Python. However, I will also share Python code that correspond with R code. At the end of this course, you will have an option to continue to serious data science stuff."
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "R Workshops for Data Science",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand R and its functions\nConduct basic programming using R\nLearn to wrangle, clean and transform data\nLearn the basics of data visualisation using ggplot2\nLearn how to conduct exploratory data analysis\nLearn to communicate and tell stories using data"
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "R Workshops for Data Science",
    "section": "Materials",
    "text": "Materials\nThere are tons of materials available online; below I share compulsory and recommended materials we will be using. There will be additional materials and slides for each section:\n\nWickham, H., & Grolemund, G. (2016). R for Data Science: import, tidy, transform, visualize, and model data. O’Reilly Media, Inc.\nHealy, K. (2018). Data visualization: a practical introduction. Princeton University Press."
  },
  {
    "objectID": "index.html#lets-get-started",
    "href": "index.html#lets-get-started",
    "title": "R Workshops for Data Science",
    "section": "Let’s Get Started",
    "text": "Let’s Get Started"
  },
  {
    "objectID": "my-profile.html",
    "href": "my-profile.html",
    "title": "About Me",
    "section": "",
    "text": "I am a geographer by training, currently completing my PhD, focusing on the geographies of youth. I work as a lecturer in the School of Education, University of KwaZulu Natal, Pietermaritzburg Campus. My research interests include urban and political geography, political economy, computational social science and quantitative social science. I use data science tools, computational methods and statistical modelling in my research. I enjoy analysing data in R and Python."
  },
  {
    "objectID": "weeks/week-1a.html",
    "href": "weeks/week-1a.html",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "understand the basics of R programming\nUnderstand data types and objects\nunderstand base (built-in) R functions"
  },
  {
    "objectID": "weeks/week-1a.html#learning-objectives",
    "href": "weeks/week-1a.html#learning-objectives",
    "title": "Introduction to R Programming",
    "section": "",
    "text": "understand the basics of R programming\nUnderstand data types and objects\nunderstand base (built-in) R functions"
  },
  {
    "objectID": "weeks/week-1a.html#reading",
    "href": "weeks/week-1a.html#reading",
    "title": "Introduction to R Programming",
    "section": "Reading",
    "text": "Reading"
  },
  {
    "objectID": "weeks/week-1a.html#basics-of-r",
    "href": "weeks/week-1a.html#basics-of-r",
    "title": "Introduction to R Programming",
    "section": "Basics of R",
    "text": "Basics of R\nIn the previous section, we showed the layout of RStudio. For this lesson, you will write all the code in the scripts/source and see the output in the console. To comment on the code, you will use the hashtag (#) to tell R not to execute the line as a code.\nR can be used as a calculator:\n4 + 7 \n[1] 11\n9 * 6 \n[1] 54\n\nArithmetic Operators\n\n\n\nDescription\nOperator\nExample\n\n\n\n\nAddition\n+\n1 + 3\n\n\nSubtract\n-\n90 - 5\n\n\nMultiplication\n*\n6 * 7\n\n\nExponentiation\n^\n3 ^ 6\n\n\nDivision\n/\n54 / 7\n\n\n\nType in and run the above examples in the script or console.\n\n\nAssignment operator\nNotice that we have been running previous codes without assigning them to objects. We use the assignment operator (&lt;-) in R to assign whatever we have created into object; this can be a plot, a variable, a table, etc. Using above example, let us recreate our code but assigning them:\n\naddition &lt;- 4 + 7 \n\nprint(addition)\n\n[1] 11\n\nmultiplication &lt;- 9 * 6 \n\nprint(multiplication)\n\n[1] 54\n\n\nNotice in the above code, we have told R to create an object called ‘addition’ and every time we call print() function, the results will be printed in the console. Please remember the assignment operator (&lt;-) as we will use it through this course. We can also assign objects using =:\n\naddition = 4 + 7\n\nprint(addition)\n\n[1] 11\n\n\nHowever, many R programmers and I use the &lt;- operator for a serious reasons; so we will stick to it.\nAlso, you do not necessarily need to call the print() function in order to print results/output, you can just write the name of the object you have created, run it and it will be printed:\n\nriver_km &lt;- 1200\n\nriver_km\n\n[1] 1200\n\n\nNotice that the object river_km when we print the object river_km, it prints what is inside of it, the element on the console.\nBasically, we have created variables (addition, multiplication, river_km). With these variables, we can perform basic analysis:\n\ntugela_length &lt;- 502\n\norange_river_length &lt;- 2200\n\n# Find the difference in river length\norange_river_length - orange_river_length\n\n[1] 0\n\n# sum of rivers\n\norange_river_length - orange_river_length\n\n[1] 0\n\n\n\n\nData types in R\nThere 3 basic data types in R\n\ncharacter: strings, text, etc\nnumeric: numbers, can be integers or whole numbers\nlogical: TRUE/FALSE, also called Boolean\n\nAn example of a character:\n\nriver &lt;- \"Tugela\"\n\nprovince &lt;- \"KZN\"\n\nNotice that a character need to be surrounded by (““) every time, otherwise R will return an error\n\nriver &lt;- Tugela\n\nError in eval(expr, envir, enclos): object 'Tugela' not found\n\nprovince &lt;- KZN\n\nError in eval(expr, envir, enclos): object 'KZN' not found\n\n\nAn example of a numerical:\n\ntugela_length_km &lt;- 502\n\norange_river_length &lt;- 2200\n\nnumericals do not to need to be surrounded by \" \", if you do, they will be stored as numeric.\nAn example of a logical data type:\n\nkzn &lt;- TRUE\n\nkzn \n\n[1] TRUE\n\ngauteng &lt;- FALSE\n\ngauteng \n\n[1] FALSE\n\n\nYou can ask R to tell you the type of the data structure by using class() function:\n\nclass(tugela_length_km)\n\n[1] \"numeric\"\n\nclass(orange_river_length)\n\n[1] \"numeric\"\n\nclass(river)\n\n[1] \"character\"\n\nclass(gauteng)\n\n[1] \"logical\""
  },
  {
    "objectID": "weeks/week-1a.html#base-r-functions",
    "href": "weeks/week-1a.html#base-r-functions",
    "title": "Introduction to R Programming",
    "section": "Base R functions",
    "text": "Base R functions\nR has built-in functions that we can use to analyse and manipulate data. A function is always followed by (). We will use examples to illustrate various R functions.\n\nSummary statistics\nBasic summary statistics functions are mean, median, range, standard deviation, etc. We can get in R using the mean() function:\n\n# first create a vector of numbers (\"numeric vector\")\n\nrivers_length &lt;- c(502, 2200, 1500, 3050, 800)\n\nrivers_length\n\n[1]  502 2200 1500 3050  800\n\nmean(rivers_length)\n\n[1] 1610.4\n\n\nThe mean of a rivers_length variable we have created is 1610.4.\nWe can use the median() function to get the median of our variable:\n\nmedian(rivers_length)\n\n[1] 1500\n\n\nThe median age is 1500\nAnd also the standard deviation using sd() function:\n\nsd(rivers_length)\n\n[1] 1038.937\n\n\nYou can get minimum and maximum values using min() and max() functions, respectively:\n\nmin(rivers_length)\n\n[1] 502\n\nmax(rivers_length)\n\n[1] 3050\n\n\nYou can create a basic plot using a hist() function:\n\nhist(rivers_length)\n\n\n\n\nYou may want to arrange the values into ascending or descending order using the sort() function:\n\nsort(rivers_length) # sort into ascending order\n\n[1]  502  800 1500 2200 3050\n\nsort(rivers_length, decreasing = T) # sort into descending order\n\n[1] 3050 2200 1500  800  502\n\n\nIn this section, you have learnt basic data types, functions and operators. Next, we learn different type of data structures."
  },
  {
    "objectID": "weeks/week-1b.html",
    "href": "weeks/week-1b.html",
    "title": "2 Data Structures in R",
    "section": "",
    "text": "While I aim to introduce data structures: vectors, dataframes, lists, matrices, however our key focus is on dataframes"
  },
  {
    "objectID": "weeks/week-1b.html#learning-objectives",
    "href": "weeks/week-1b.html#learning-objectives",
    "title": "2 Data Structures in R",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nTo understand data types: vectors, dataframes, lists, matrices\nTo do basic analysis"
  },
  {
    "objectID": "weeks/week-1b.html#please-read",
    "href": "weeks/week-1b.html#please-read",
    "title": "2 Data Structures in R",
    "section": "Please Read",
    "text": "Please Read"
  },
  {
    "objectID": "weeks/week-1b.html#vectors",
    "href": "weeks/week-1b.html#vectors",
    "title": "2 Data Structures in R",
    "section": "2.1 Vectors",
    "text": "2.1 Vectors\nRemember objects we created in the previous section)? Those were all vectors. A vector is the basic data structure used to hold values of the same type. Similar to the previous section, a vector can be:\n\nnumeric\ncharacter\nlogical\n\nAlthough we are repeating stuff from previous section, but it worth it.\n\n2.1.1 Character vector\nLet us create a character vector of countries in Southern Africa:\n\nsouthern_africa &lt;- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\n## print southern_africa\n\nsouthern_africa\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\n\nWe have created vector that named southern_africa, and it has the countries in the Southern African Region. Let us use basic functions to examine our southern_africa vector. We can get the type of vector by using class() function:\n\nclass(southern_africa)\n\n[1] \"character\"\n\n\nIt is character vector. Remember from the previous section what is the character data type.\nWe can examine the length by using length() function:\n\nlength(southern_africa)\n\n[1] 10\n\n\nWe have 10 elements in the southern_africa vector\n\n\n2.1.2 Numeric vector\nLet us create a numeric vector, that we name life_expectancy, that has the average life expectancy of the countries of Southern Africa:\n\nlife_expectancy &lt;- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\n\n## print the life_expectancy vector\n\nlife_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n\nWe can confirm the type of vector we have created by using the class() function:\n\nclass(life_expectancy)\n\n[1] \"numeric\"\n\n\nIndeed, the life_expectancy vector is a numeric vector.\nLet us do basic analyses of this vector. We can get the mean by using mean() functions:\n\nmean(life_expectancy)\n\n[1] 59.72\n\n\nWe can get the median and standard deviation of life_expectancy vector using median() and sd() functions, respectively:\n\nmedian(life_expectancy)\n\n[1] 60.2\n\nsd(life_expectancy)\n\n[1] 2.898582\n\n\nYou can get an element of vector by using [] function. Let us get the first element in life_expectancy vector:\n\nlife_expectancy[1]\n\n[1] 61.6\n\n\nTo get the 1st, 5th, 8th elements within a vector, you would do the following:\n\nlife_expectancy[c(1, 5, 8)]\n\n[1] 61.6 62.9 62.3\n\n\nYou can also extract the vector elements by using the colon (:):\n\nlife_expectancy[3:6]\n\n[1] 57.1 53.1 62.9 59.3\n\n\nHere, we wanted to get all the elements starting from the 3rd position to the 6th position.\nKey lesson: a vector holds items of a similar type: as we have seen in the southern_countries and life_exepctancy vectors."
  },
  {
    "objectID": "weeks/week-1b.html#dataframes",
    "href": "weeks/week-1b.html#dataframes",
    "title": "2 Data Structures in R",
    "section": "2.2 Dataframes",
    "text": "2.2 Dataframes\nDataframes will be the key focus throughout the course, so I will just briefly explain what is a dataframe. A dataframe is tabular data format, consisting of columns and rows. Let us use an example by creating a dataframe in R:\n\n# Create a character vector\ncountry_names &lt;- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\ncountry_names\n\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n\n## Create a numeric vector\n\nlife_expectancy &lt;- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\nlife_expectancy\n\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n\nBecause we have 2 vectors of equal length, we can create a dataframe, using a data.frame() function:\n\nafrica_df &lt;- data.frame(country_names, life_expectancy) #combine two vectors to create a dataframe\n\nafrica_df\n\n   country_names life_expectancy\n1         Angola            61.6\n2       Botswana            61.1\n3        Lesotho            57.1\n4         Malawi            53.1\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n\nWe have created africa_df dataframe, with columns and rows. Let us examine it. How many columns and rows are in the dataframe. We can use the str() function:\n\nstr(africa_df)\n\n'data.frame':   10 obs. of  2 variables:\n $ country_names  : chr  \"Angola\" \"Botswana\" \"Lesotho\" \"Malawi\" ...\n $ life_expectancy: num  61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n\n\nR tells us that there are 10 observations (rows) and 2 columns\nLet us view the first few observations (rows) using the head() function:\n\nhead(africa_df)\n\n  country_names life_expectancy\n1        Angola            61.6\n2      Botswana            61.1\n3       Lesotho            57.1\n4        Malawi            53.1\n5    Mozambique            62.9\n6       Namibia            59.3\n\n\nView the last few observations using the tail()\n\ntail(africa_df)\n\n   country_names life_expectancy\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n\nIn the following sections, we will be working with dataframes a lot, and other non-exhastive functions to manipulate and transofrm dataframes."
  },
  {
    "objectID": "weeks/week-1b.html#other-data-types-matrices-and-lists",
    "href": "weeks/week-1b.html#other-data-types-matrices-and-lists",
    "title": "2 Data Structures in R",
    "section": "2.3 Other data types: matrices and lists",
    "text": "2.3 Other data types: matrices and lists\nYou will learn more about matrix objects when you advance in your data science career.\nlists are another data structure that are used to hold objects of different type. For example, they can hold both vector and dataframe:\n\n## we already have `africa_df` dataframe\n\n## let us create a vector\n\nnames &lt;- c(\"Aubrey\", \"Sphethu\", \"Peter\")\n\nages &lt;- c(32, 7, 19)\n\nWe have objects: africa_df (dataframe) and names (vector) and ages (vector) objects. From these objects, we can create a lists:\n\nfirst_list &lt;- list(africa_df, names, ages)\n\nfirst_list\n\n[[1]]\n   country_names life_expectancy\n1         Angola            61.6\n2       Botswana            61.1\n3        Lesotho            57.1\n4         Malawi            53.1\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n[[2]]\n[1] \"Aubrey\"  \"Sphethu\" \"Peter\"  \n\n[[3]]\n[1] 32  7 19\n\n\nDid you see that Jimmy? We actually printed the list. As you advance in your programming with R, you will see why lists are important and how everything is a lit."
  },
  {
    "objectID": "weeks/week-2.html#base-r-vs-external-packages",
    "href": "weeks/week-2.html#base-r-vs-external-packages",
    "title": "3 Data Visualisation",
    "section": "Base R vs External Packages",
    "text": "Base R vs External Packages\nUntil now, we have used functions within Base R, which are already installed in R. While Base/bulit-in R functions are important, however, in many cases, we want to use external packages to do any task we want. This also applies in other programming languages like Python. For example, if we want to do spatial and GIS analysis, we can install the sf package; for machine learning, we can use caret and tidymodels packages. There are over 2 000 R packages, contributed by different individuals around the world, and they are stored and curated in the CRAN website. In most of the cases, you will be working with external packages.\nOne of the most popular packages in R is the tidyverse meta-package, which include a collection of packages for working with data; some of packages in the tidyverse are:\n\ndplyr: for data cleaning, wrangling and transformation\nggplot2: for data visualisation\ntidyr: for tidying up data\nreadr: for importing data\npurrr: for advanced functional programming\nstringr: for manipulating string/text data\n\nThere are other packages in the tidyverse. The philosophy of tidyverse is tidy data:\n\n\nEach variable is a column; each column is a variable.\nEach observation is row; each row is an observation.\nEach value is a cell; each cell is a single value. [@r_4_ds]\n\n\n\n\n\nTidy data\n\n\nTidy data is a principle we are going to stick on through this course:\n\n\n\nTidy data @wickham_tidyverse_2019\n\n\nSo all in all, tidyverse make it easier to work with dataframes and most people prefer it than base R functions. We will use an example at the end to understand the differences between Base R and tydiverse. You will need to install the package first. In R you install a package by calling install.package() function:\n\ninstall.packages(\"tidyverse\")\n\nWhenever you need to use an external package and its functions, you first need to load it using library() function. In our case, we want to load the tidyverse package we have just installed:\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nYou will load other packages like this."
  },
  {
    "objectID": "weeks/week-2.html#introduction-to-data-visualisation",
    "href": "weeks/week-2.html#introduction-to-data-visualisation",
    "title": "3 Data Visualisation",
    "section": "3.1 Introduction to data visualisation",
    "text": "3.1 Introduction to data visualisation\nData visualisation is an important skill for data scientists. In fact, data manipulation and visualisations go hand in hand. Before any analysis, it is important to visualise data to explore its distribution, relationships, normality, etc.\nIn this section, we will use the ggplot2 package within tidyverse to learn the foundations of data visualisation. The ggplot2 package got it philosophy from the book The Grammar of Graphics, written by Leland Wilkinson. The ggplot2 package was developed by Hadley Wickham, probably one of the most greatest data scientist in this era.\nWe will be working with the gapminder dataset, which is the real world data. You will need to install its first because it comes as a package:\n\ninstall.packages(\"gapminder\")\n\nAfter installing the gapminder data, you will have to load it using library function:\n\nlibrary(gapminder)\n\nRemember that we said everything we create is an object and we need to assign it? Let us assign gapminder that and name simply as gapminder using the &lt;- operator:\n\ngapminder &lt;- gapminder\n\nExplore the data first; how many columns and rows are in gapminder dataframe? We will use str() function:\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nWe can see that gapminder has 6 and 1704. The columns in the dataset are:\n\ncountry: Simply the country\ncontinent: Continent\nyear: The year data was collected\nlifeExp: Life expectancy of a country in year\npop: Population of the country in a year\ngdpPercap: Gross Domestic Product of a country in a year\n\nggplot2 has steps/processes you follow to create a plot. Let us illustrate using the gapminder dataset. Load ggplot2 package first:\n\nlibrary(ggplot2)\n\nA plot created in using ggplot2 has the following components/layers, and we will go through them step-by-step:\n\n\n\nsource"
  },
  {
    "objectID": "weeks/week-2.html#create-a-plot",
    "href": "weeks/week-2.html#create-a-plot",
    "title": "3 Data Visualisation",
    "section": "3.2 Create a plot",
    "text": "3.2 Create a plot\nFrom the ggapminder dataframe, we will create a scatterplot of life expectancy and GDP per capita, and add all the components of ggplot step-by-step.\n\n3.2.1 Layer 1: data\nWe use the ggplot() function to add data, in this case, gapminder dataframe:\n\nggplot(data = gapminder)\n\n\n\n\n\n\n3.2.2 Layer 2: aesthetics\nAesthetics are used to allocate x and y variables, depending on the type of the plot we want to create, in this case, x variable is gdpPercap and y variable is lifeExp:\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))\n\n\n\n\nThere are other aesthetics that we can add, such as size, colour, shape, group, etc. We will use these later in this section.\n\n\n3.2.3 Layer 3: geometry\nGeometry is the type of plot/object we want to create. In our casewe want to create a scatterplot, by using geom_point() function:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n\n\n\n\nWe now have our first plot. There other geometry types in ggplot depending on the type of data you have\n\ngeom_point() : for sactterplots\ngeom_line() : for line plots\ngeom_histogram() : for histogram\ngeom_area() : for area charts\ngeom_boxplot() : for boxplots\ngeom_bar() : for bar graphs\n\nIn the code above, we have three steps to create a plot:\n\nggplot(data = gapminder): we are simply telling ggplot that we are using gapminder dataset\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)): we are adding mapping aesthetics or aesthetics, allocating x, y axis.\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point(): We have added a geometry layer through geoms_point() function to create a scatterplot.\n\n\n\n3.2.4 Layer 4: Labels\nggplot2 package can handle various plot labels, including axis titles and graph titles. We can do this using labs() function:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\")\n\n\n\n\n\n\n3.2.5 Facets\nFaceting is used when we’d like to split a particular visualization by the values of another variable. This will create multiple copies of the same type of plot with matching x and y axes, but whose content will differ.\nWhen we one to split the plots into various sub-categories, by using a categorical variable, we use facet_wrap() function. For example, we may want to split the above plot by continent:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent)\n\n\n\n\nThere are other argument that comes with facet_wrap() function. We can specify tghe number of rows and columns, using nrow() and ncol() functions, respectively.\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point() +\n  facet_wrap(~continent, ncol = 5)\n\n\n\n\n\n\n3.2.6 Transforming axis scales\nNotice that x-axis is not normally distributed. One of the method to use is to transform data to log10, to normnalise it:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp)) + \n    geom_point() +\n  scale_x_log10()\n\n\n\n\nLook how it changes.\nThere are many scales functions and you will learn them along the way by coding and exploring ggplot.\n\n\n3.2.7 Returning to aeathetics\nWe can add other aesthetics in our plot, for example, we can allocate colour to the continent column:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point() +\n  scale_x_log10()\n\n\n\n\nNotice how countries in Europe tend to have higher GDP per capita and and higher life expectancy compared to African countries.\nWe can also change the shape of points in the aesthetics:\n\nggplot(data = gapminder,\n    aes(x = gdpPercap, y = lifeExp, colour = continent, shape = continent)) + \n    geom_point() +\n  scale_x_log10()\n\n\n\n\nThere are many other aesthetics arguments that are used and they are beyond the scope of this course. It takes practice.\n\n\n3.2.8 Themes\nTry experimenting with different themes that comes with ggplot. theme_minimal() will produce a minimalist theme with less background:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal()\n\n\n\n\nThere are other themes that can transform your plots to look more elegant.\nYou can also choose the how fonts appear using themes() function:\n\nggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme(text = element_text(size = 15))\n\n\n\n\nWith themes() function, you can remove borders, change the colour of fonts, remove the legend, etc."
  },
  {
    "objectID": "weeks/week-2.html#visualising-numerical-data",
    "href": "weeks/week-2.html#visualising-numerical-data",
    "title": "3 Data Visualisation",
    "section": "3.3 Visualising Numerical data",
    "text": "3.3 Visualising Numerical data\n\n3.3.1 Single variable\nFor visualising one variable, we mostly histogram, density plot, etc:\nCreate a histogram of GDP per capita:\n\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can see that the GDP per capita variable is skewed. Density plots are also similar to histograms:\n\nggplot(data = gapminder, aes(gdpPercap)) +\n  geom_density()\n\n\n\n\n\n\n3.3.2 Visualising more than one numerical variables\nA scatter plot is used to show relationship between two variables\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + \n    geom_point()\n\n\n\n\nWe can add other aeasthetics such as shape, colour etc: Let’s add the colour aesthetics:\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n    geom_point()\n\n\n\n\nWe can change the add the size aesthetics and use population of the country:\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, colour = continent, size = pop)) + \n  geom_point()\n\n\n\n\n\n\n3.3.3 Visualising numerical by group/category\nA boxplot is useful when we want to view statistics by a particular group, let say, GDP by continent:\n\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot()\n\n\n\n\nWe can also use a column chart, let say, view GDP per capita by continent:\n\nggplot(data = gapminder, aes(x = continent, y = gdpPercap)) +\n  geom_col()\n\n\n\n\n\n\n3.3.4 visualise trends\nWe mainly use line graphs to visualise statistics over time. Let use see how life expectancy changes over time\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line()\n\n\n\n\nThis looks ugly, but we will learn how to create proper line plots at the end.\nYou can also use stacked column chart:\n\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col()\n\n\n\n\nView by continent and make it 100% stacked bar\n\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\")\n\n\n\n\nYou can make horizontal bars by using coord_flip():\n\nggplot(data = gapminder, aes(x = year, y = pop, fill = continent)) +\n  geom_col(position = \"fill\") +\n  coord_flip()"
  },
  {
    "objectID": "weeks/week-2.html#visualising-categoricalcharacter-data",
    "href": "weeks/week-2.html#visualising-categoricalcharacter-data",
    "title": "3 Data Visualisation",
    "section": "3.4 Visualising categorical/character data",
    "text": "3.4 Visualising categorical/character data\nIn the gapminder dataset, we have two categorical columns: country and continent. One of the plot used for handling categorical data is bar chart. In ggplot, we use geom_bar:\n\nggplot(data = gapminder, aes(x = continent)) + \n  geom_bar()\n\n\n\n\n\nBonus one: Interactive charts\nYou can make your charts interactive by using plotly package, you will need to install it first\n\ninstall.packages(plotly)\n\nThen load the package:\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nFirst, create a plot using ggplot() and save it using the &lt;- operator:\n\nfirst_plot &lt;- ggplot(data = gapminder,\n       aes(x = gdpPercap, y = lifeExp, colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = \"People in developed countries tend to live longer\",\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() \n\nWe named the plot first_plot. From the plotly package, you going to use ggplotly() function and put the plot object you have created:\n\nggplotly(first_plot)\n\n\n\n\n\nExperiment with the results, when you hoover around the plot, you can see it shows information by variable. You can select which continent to make visible by clicking on the legend. Beautiful!\n\n\nBonus Two: Animate\nYou can create an animated chart using the gganimate package. Install first:\n\ninstall.packages(gganimate)\n\nLoad the package:\n\nlibrary(gganimate)\n\nYou would want to see how the life expectancy and gdp per capita changes over time. First create the plot, but add few functions:\n\nanimated_plot &lt;- ggplot(data = gapminder,\n       aes(x = gdpPercap, \n           y = lifeExp, \n           size = pop,\n           colour = continent)) + \n  geom_point() +\n  scale_x_log10() +\n  labs(x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       title = \"GDP vs Life Expectancy (1952-2007)\",\n       subtitle = 'Year: {frame_time}',\n       caption = \"Data source: Gapminder\") +\n  theme_minimal() +\n  transition_time(year) +\n  ease_aes('linear') \n\n\nanimate(animated_plot)\n\n\n\n\nLook at the results!\nThis section introduced you to basics of data visualisation using ggplot2 package. You may need to consult the following materials for intermediate and advanced skills in data visualisation:\n\nHealy, K. (2018). Data visualization: a practical introduction. Princeton University Press\nThe R Graph Gallery\nR for Data Science. Chapter 10-12\nData visualisation with ggplot2: cheatsheet"
  },
  {
    "objectID": "weeks/week-3.html",
    "href": "weeks/week-3.html",
    "title": "4 Data Manipulation",
    "section": "",
    "text": "Understand dataframes\nManipulate, transform and analyse dataframes\n\n\n\n\nDataframes, as we saw the previous section, a dataframe is a tabular data format, with columns and rows. Columns are variable names and rows are individual observations. Let us recreate the previous dataframe of names and ages of this class:\n\n# Firstly, create a character vector with names\nnames &lt;- c(\"thabiso\", \"nontando\", \"thandolwethu\", \"akhona\", \"perry\", \"balindile\", \"thembelani\", \"sabeliwe\",  \"phakamani\",    \"obianuju\", \"tshepang\", \"charity\", \"lungelo\", \"ntsikelelo\", \"akhona\", \"duduzile\")\n\nset.seed(14) #I do this so that we can get same results every time we generate numbers or simulate\n\n# Create a numeric vector of ages\nage &lt;- sample(18:32, 16, replace = T)\n\n# Create a dataframe\ndata_frame &lt;- data.frame(names, age) \n\n# print the dataframe\ndata_frame \n\n          names age\n1       thabiso  26\n2      nontando  26\n3  thandolwethu  28\n4        akhona  21\n5         perry  28\n6     balindile  31\n7    thembelani  31\n8      sabeliwe  21\n9     phakamani  27\n10     obianuju  32\n11     tshepang  18\n12      charity  26\n13      lungelo  20\n14   ntsikelelo  29\n15       akhona  22\n16     duduzile  20\n\n\nA dataframe is basically made of vectors. In our data_frame, we have character (names) and numeric (age) vectors that make our dataframe. We can extract these elements using the $ sign:\n\ndata_frame$names\n\n [1] \"thabiso\"      \"nontando\"     \"thandolwethu\" \"akhona\"       \"perry\"       \n [6] \"balindile\"    \"thembelani\"   \"sabeliwe\"     \"phakamani\"    \"obianuju\"    \n[11] \"tshepang\"     \"charity\"      \"lungelo\"      \"ntsikelelo\"   \"akhona\"      \n[16] \"duduzile\"    \n\ndata_frame$age\n\n [1] 26 26 28 21 28 31 31 21 27 32 18 26 20 29 22 20\n\n\nWe can do a range of analysis with a dataframe. But firstly, we need to use right functions for this task.\n\n\n\nAfter installing the package, you need to load it into the current R session using library() function:\n\nlibrary(tidyverse)\n\n\n\n\nIn this section dplyr packages, which is included in the tidyverse collection of packages. dplyr has 5 verbs/functions:\n\nselect()\nfilter()\narrange()\nsummarise()\nmutate()\n\n\n\nAll along, we have been working with fictional data. Let us use the gapminder dataset, which can be installed as:\n\ninstall.packages(\"gapminder\")\n\nAfter installing the gapminder data, you will have to load it using library function:\n\nlibrary(gapminder)\n\nThan assign it to the object, gapminder, using the &lt;- operator:\n\ngapminder &lt;- gapminder\n\ngapminder$country &lt;- as.character(gapminder$country)\ngapminder$continent &lt;- as.character(gapminder$continent)\n\nNow you have an object, which is a dataframe, called gapminder, you can see it in the Environment pane in RStudio. It shows that it has ncol(gapminder) columns/variables and nrow(gapminder) observations/rows\n\n\n\ngapminder dataframe in Environment pane\n\n\nYou can use the str() fucntion to get the structure of the dataframe:\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nWe have 6 variables: - “country”\n\n“continent”\n“year”\n“lifeExp”: life expectancy of a country\n“pop”: population\n“gdpPercap”: GDP per capita\n\nYou can get a sample of the first observations/rows using head() function:\n\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\n\n\nWe may be interested in some of the columns in the gampminder dataframe, let say, for example, “country” and “pop” variables and discard others; we use the select() function:\n\nlibrary(dplyr)\nselect(gapminder, \"country\", \"pop\")\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nR return only the country and population variables. select() function only return the variables/columns we are interested in:\n\nThe best way to work with R is using a pipe (|&gt;) operator. A pipe operator connect various tasks, for example:\n\ngapminder |&gt;\n  select(country, pop)\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nYou will see the importance of the pipe operator later when our analysis get complicated. Throught the course, we will use the pipe operator. Also, you will in many textbooks and online resources uses the %&gt;% operator instead. That is because initially, a pipe operator was an external function within the mgttr package, so it was not an built-in R function. In recent years, the base R |&gt; pipe operator has been developed and we will stick to it. But they all do the same thing, so it your preference:\n\ngapminder %&gt;% \n  select(country, pop)\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nAlso, notice that we selected “country’ and”pop” columns but did not save them and assigned to an object. To store the results into an object, we have to use assignment operator (&lt;-):\n\ngapminder_selected &lt;- gapminder |&gt;\n  select(country, pop)\n\ngapminder_selected # print\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nNow we have saved results as gapminder_selected, and we can do other analysis with this object because we have saved it. So, in a nutshell, when you run a code without assigning results into an object, using the &lt;- operator, results will not be saved but will be printed.\n\n\n\nYou may be interested in observations that meet certain conditions. We use filter() function to return the list that meet our conditions. Let us “continent” variable in gapminder dataframe. Get a basic table first:\n\ntable(gapminder$continent)\n\n\n  Africa Americas     Asia   Europe  Oceania \n     624      300      396      360       24 \n\n\nFilter has several operators:\n\n==: equal to\n!=: not equal to\n&gt;: greater than\n&lt;: less than\n&gt;=: greater than or equal to\n&lt;=: less than or equal to\n\nThere are five continents. Let us filter only observations from the Africa continent:\n\nafrica_gapminder &lt;- gapminder |&gt; \n  filter(continent == \"Africa\")\n\nafrica_gapminder  # print \n\n# A tibble: 624 × 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 614 more rows\n\n\nafrica_gapminder object is a dataframe we have just created, with only countries from the African continent. What filter() does is to return observations/rows that only meet our conditions:\n\nLet us filter a numeric vector; for example, we may want to filter countries with population of above 50 million and assign results to an object named high_pop:\n\nhigh_pop &lt;- gapminder |&gt; \n  filter(pop &gt; 50000000)\n\nhigh_pop\n\n# A tibble: 190 × 6\n   country    continent  year lifeExp       pop gdpPercap\n   &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Bangladesh Asia       1957    39.3  51365468      662.\n 2 Bangladesh Asia       1962    41.2  56839289      686.\n 3 Bangladesh Asia       1967    43.5  62821884      721.\n 4 Bangladesh Asia       1972    45.3  70759295      630.\n 5 Bangladesh Asia       1977    46.9  80428306      660.\n 6 Bangladesh Asia       1982    50.0  93074406      677.\n 7 Bangladesh Asia       1987    52.8 103764241      752.\n 8 Bangladesh Asia       1992    56.0 113704579      838.\n 9 Bangladesh Asia       1997    59.4 123315288      973.\n10 Bangladesh Asia       2002    62.0 135656790     1136.\n# ℹ 180 more rows\n\n\nYou can also combine 2 conditions. Let us say we want:\n\ncountries in Africa"
  },
  {
    "objectID": "weeks/week-3.html#learning-objectives",
    "href": "weeks/week-3.html#learning-objectives",
    "title": "4 Data Manipulation",
    "section": "",
    "text": "Understand dataframes\nManipulate, transform and analyse dataframes"
  },
  {
    "objectID": "weeks/week-3.html#introduction",
    "href": "weeks/week-3.html#introduction",
    "title": "4 Data Manipulation",
    "section": "",
    "text": "Dataframes, as we saw the previous section, a dataframe is a tabular data format, with columns and rows. Columns are variable names and rows are individual observations. Let us recreate the previous dataframe of names and ages of this class:\n\n# Firstly, create a character vector with names\nnames &lt;- c(\"thabiso\", \"nontando\", \"thandolwethu\", \"akhona\", \"perry\", \"balindile\", \"thembelani\", \"sabeliwe\",  \"phakamani\",    \"obianuju\", \"tshepang\", \"charity\", \"lungelo\", \"ntsikelelo\", \"akhona\", \"duduzile\")\n\nset.seed(14) #I do this so that we can get same results every time we generate numbers or simulate\n\n# Create a numeric vector of ages\nage &lt;- sample(18:32, 16, replace = T)\n\n# Create a dataframe\ndata_frame &lt;- data.frame(names, age) \n\n# print the dataframe\ndata_frame \n\n          names age\n1       thabiso  26\n2      nontando  26\n3  thandolwethu  28\n4        akhona  21\n5         perry  28\n6     balindile  31\n7    thembelani  31\n8      sabeliwe  21\n9     phakamani  27\n10     obianuju  32\n11     tshepang  18\n12      charity  26\n13      lungelo  20\n14   ntsikelelo  29\n15       akhona  22\n16     duduzile  20\n\n\nA dataframe is basically made of vectors. In our data_frame, we have character (names) and numeric (age) vectors that make our dataframe. We can extract these elements using the $ sign:\n\ndata_frame$names\n\n [1] \"thabiso\"      \"nontando\"     \"thandolwethu\" \"akhona\"       \"perry\"       \n [6] \"balindile\"    \"thembelani\"   \"sabeliwe\"     \"phakamani\"    \"obianuju\"    \n[11] \"tshepang\"     \"charity\"      \"lungelo\"      \"ntsikelelo\"   \"akhona\"      \n[16] \"duduzile\"    \n\ndata_frame$age\n\n [1] 26 26 28 21 28 31 31 21 27 32 18 26 20 29 22 20\n\n\nWe can do a range of analysis with a dataframe. But firstly, we need to use right functions for this task."
  },
  {
    "objectID": "weeks/week-3.html#base-r-vs-tidyverse",
    "href": "weeks/week-3.html#base-r-vs-tidyverse",
    "title": "4 Data Manipulation",
    "section": "",
    "text": "After installing the package, you need to load it into the current R session using library() function:\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "weeks/week-3.html#using-dplyr",
    "href": "weeks/week-3.html#using-dplyr",
    "title": "4 Data Manipulation",
    "section": "",
    "text": "In this section dplyr packages, which is included in the tidyverse collection of packages. dplyr has 5 verbs/functions:\n\nselect()\nfilter()\narrange()\nsummarise()\nmutate()\n\n\n\nAll along, we have been working with fictional data. Let us use the gapminder dataset, which can be installed as:\n\ninstall.packages(\"gapminder\")\n\nAfter installing the gapminder data, you will have to load it using library function:\n\nlibrary(gapminder)\n\nThan assign it to the object, gapminder, using the &lt;- operator:\n\ngapminder &lt;- gapminder\n\ngapminder$country &lt;- as.character(gapminder$country)\ngapminder$continent &lt;- as.character(gapminder$continent)\n\nNow you have an object, which is a dataframe, called gapminder, you can see it in the Environment pane in RStudio. It shows that it has ncol(gapminder) columns/variables and nrow(gapminder) observations/rows\n\n\n\ngapminder dataframe in Environment pane\n\n\nYou can use the str() fucntion to get the structure of the dataframe:\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nWe have 6 variables: - “country”\n\n“continent”\n“year”\n“lifeExp”: life expectancy of a country\n“pop”: population\n“gdpPercap”: GDP per capita\n\nYou can get a sample of the first observations/rows using head() function:\n\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;chr&gt;       &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\n\n\nWe may be interested in some of the columns in the gampminder dataframe, let say, for example, “country” and “pop” variables and discard others; we use the select() function:\n\nlibrary(dplyr)\nselect(gapminder, \"country\", \"pop\")\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nR return only the country and population variables. select() function only return the variables/columns we are interested in:\n\nThe best way to work with R is using a pipe (|&gt;) operator. A pipe operator connect various tasks, for example:\n\ngapminder |&gt;\n  select(country, pop)\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nYou will see the importance of the pipe operator later when our analysis get complicated. Throught the course, we will use the pipe operator. Also, you will in many textbooks and online resources uses the %&gt;% operator instead. That is because initially, a pipe operator was an external function within the mgttr package, so it was not an built-in R function. In recent years, the base R |&gt; pipe operator has been developed and we will stick to it. But they all do the same thing, so it your preference:\n\ngapminder %&gt;% \n  select(country, pop)\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nAlso, notice that we selected “country’ and”pop” columns but did not save them and assigned to an object. To store the results into an object, we have to use assignment operator (&lt;-):\n\ngapminder_selected &lt;- gapminder |&gt;\n  select(country, pop)\n\ngapminder_selected # print\n\n# A tibble: 1,704 × 2\n   country          pop\n   &lt;chr&gt;          &lt;int&gt;\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n\n\nNow we have saved results as gapminder_selected, and we can do other analysis with this object because we have saved it. So, in a nutshell, when you run a code without assigning results into an object, using the &lt;- operator, results will not be saved but will be printed.\n\n\n\nYou may be interested in observations that meet certain conditions. We use filter() function to return the list that meet our conditions. Let us “continent” variable in gapminder dataframe. Get a basic table first:\n\ntable(gapminder$continent)\n\n\n  Africa Americas     Asia   Europe  Oceania \n     624      300      396      360       24 \n\n\nFilter has several operators:\n\n==: equal to\n!=: not equal to\n&gt;: greater than\n&lt;: less than\n&gt;=: greater than or equal to\n&lt;=: less than or equal to\n\nThere are five continents. Let us filter only observations from the Africa continent:\n\nafrica_gapminder &lt;- gapminder |&gt; \n  filter(continent == \"Africa\")\n\nafrica_gapminder  # print \n\n# A tibble: 624 × 6\n   country continent  year lifeExp      pop gdpPercap\n   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 614 more rows\n\n\nafrica_gapminder object is a dataframe we have just created, with only countries from the African continent. What filter() does is to return observations/rows that only meet our conditions:\n\nLet us filter a numeric vector; for example, we may want to filter countries with population of above 50 million and assign results to an object named high_pop:\n\nhigh_pop &lt;- gapminder |&gt; \n  filter(pop &gt; 50000000)\n\nhigh_pop\n\n# A tibble: 190 × 6\n   country    continent  year lifeExp       pop gdpPercap\n   &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Bangladesh Asia       1957    39.3  51365468      662.\n 2 Bangladesh Asia       1962    41.2  56839289      686.\n 3 Bangladesh Asia       1967    43.5  62821884      721.\n 4 Bangladesh Asia       1972    45.3  70759295      630.\n 5 Bangladesh Asia       1977    46.9  80428306      660.\n 6 Bangladesh Asia       1982    50.0  93074406      677.\n 7 Bangladesh Asia       1987    52.8 103764241      752.\n 8 Bangladesh Asia       1992    56.0 113704579      838.\n 9 Bangladesh Asia       1997    59.4 123315288      973.\n10 Bangladesh Asia       2002    62.0 135656790     1136.\n# ℹ 180 more rows\n\n\nYou can also combine 2 conditions. Let us say we want:\n\ncountries in Africa"
  }
]