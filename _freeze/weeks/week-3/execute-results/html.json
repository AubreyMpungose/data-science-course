{
  "hash": "411e36e96ccde569c6af7c8f08d32748",
  "result": {
    "markdown": "---\ntitle: \"4 Data Manipulation\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\n---\n\n\n\n# 4.1 PART I\n\n## Learning objectives\n\n-   Understand dataframes\n\n-   Manipulate, transform and analyse dataframes\n\n## 4.1.1 Introduction\n\nDataframes, as we saw [the previous section](/weeks/week-2.html), a dataframe is a tabular data format, with columns and rows. Columns are *variable* names and rows are individual *observations*. Let us recreate the previous dataframe of names and ages of this class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Firstly, create a character vector with names\nnames <- c(\"thabiso\", \"nontando\", \"thandolwethu\", \"akhona\", \"perry\", \"balindile\", \"thembelani\", \"sabeliwe\",  \"phakamani\",    \"obianuju\", \"tshepang\", \"charity\", \"lungelo\", \"ntsikelelo\", \"akhona\", \"duduzile\")\n\nset.seed(14) #I do this so that we can get same results every time we generate numbers or simulate\n\n# Create a numeric vector of ages\nage <- sample(18:32, 16, replace = T)\n\n# Create a dataframe\ndata_frame <- data.frame(names, age) \n\n# print the dataframe\ndata_frame \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          names age\n1       thabiso  26\n2      nontando  26\n3  thandolwethu  28\n4        akhona  21\n5         perry  28\n6     balindile  31\n7    thembelani  31\n8      sabeliwe  21\n9     phakamani  27\n10     obianuju  32\n11     tshepang  18\n12      charity  26\n13      lungelo  20\n14   ntsikelelo  29\n15       akhona  22\n16     duduzile  20\n```\n:::\n:::\n\n\nA dataframe is basically made of vectors. In our data_frame, we have character (names) and numeric (age) vectors that make our dataframe. We can extract these elements using the `$` sign:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_frame$names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"thabiso\"      \"nontando\"     \"thandolwethu\" \"akhona\"       \"perry\"       \n [6] \"balindile\"    \"thembelani\"   \"sabeliwe\"     \"phakamani\"    \"obianuju\"    \n[11] \"tshepang\"     \"charity\"      \"lungelo\"      \"ntsikelelo\"   \"akhona\"      \n[16] \"duduzile\"    \n```\n:::\n\n```{.r .cell-code}\ndata_frame$age\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 26 26 28 21 28 31 31 21 27 32 18 26 20 29 22 20\n```\n:::\n:::\n\n\nWe can do a range of analysis with a dataframe. But firstly, we need to use right functions for this task.\n\n## 4.1.2 Base R vs Tidyverse\n\nAfter installing the package, you need to load it into the current R session using `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'forcats' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n## 4.1.3 Using `dplyr`\n\nIn this section `dplyr` packages, which is included in the `tidyverse` collection of packages. `dplyr` has 5 verbs/functions:\n\n-   `select()`\n\n-   `filter()`\n\n-   `arrange()`\n\n-   `summarise()`\n\n-   `mutate()`\n\n### Load the dataset\n\nAll along, we have been working with fictional data. Let us use the `gapminder` dataset, which can be installed as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"gapminder\")\n```\n:::\n\n\nAfter installing the `gapminder` data, you will have to load it using `library` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n:::\n\n\nThan assign it to the object, `gapminder`, using the `<-` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder\n\ngapminder$country <- as.character(gapminder$country)\ngapminder$continent <- as.character(gapminder$continent)\n```\n:::\n\n\nNow you have an object, which is a dataframe, called `gapminder`, you can see it in the `Environment` pane in RStudio. It shows that it has `ncol(gapminder)` columns/variables and `nrow(gapminder)` observations/rows\n\n![`gapminder` dataframe in Environment pane](images/environment_pane.png)\n\nYou can use the `str()` fucntion to get the structure of the dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n```\n:::\n:::\n\n\nWe have 6 variables:\n- \"country\" \n\n- \"continent\" \n\n- \"year\"      \n\n- \"lifeExp\": life expectancy of a country  \n\n- \"pop\": population     \n\n- \"gdpPercap\": GDP per capita\n\nYou can get a sample of the first observations/rows using `head()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <chr>       <chr>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n:::\n:::\n\n\n### 4.1.4 `select()` function\n\nWe may be interested in some of the columns in the `gampminder` dataframe, let say, for example, \"country\" and \"pop\" variables and discard others; we use the `select()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nselect(gapminder, \"country\", \"pop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nR return only the country and population variables. `select()` function only return the variables/columns we are interested in:\n\n![](images/visualise_select.png)\n\n\nThe best way to work with R is using a pipe (`|>`) operator. A pipe operator connect various tasks, for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nYou will see the importance of the pipe operator later when our analysis get complicated. Throught the course, we will use the pipe operator. Also, you will in many textbooks and online resources uses the `%>%` operator instead. That is because initially, a pipe operator was an external function within the `mgttr` package, so it was not an built-in R function. In recent years, the base R `|>` pipe operator has been developed and we will stick to it. But they all do the same thing, so it your preference:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nAlso, notice that we selected \"country' and \"pop\" columns but did not save them and assigned to an object. To store the results into an object, we have to use assignment operator (`<-`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_selected <- gapminder |>\n  select(country, pop)\n\ngapminder_selected # print\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country          pop\n   <chr>          <int>\n 1 Afghanistan  8425333\n 2 Afghanistan  9240934\n 3 Afghanistan 10267083\n 4 Afghanistan 11537966\n 5 Afghanistan 13079460\n 6 Afghanistan 14880372\n 7 Afghanistan 12881816\n 8 Afghanistan 13867957\n 9 Afghanistan 16317921\n10 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nNow we have saved results as `gapminder_selected`, and we can do other analysis with this object because we have saved it. So, in a nutshell, when you run a code without assigning results into an object, using the `<-` operator, **results will not be saved but will be printed**.\n\n### 4.1.5 `filter()` function\n\nYou may be interested in observations that meet certain conditions. We use `filter()` function to return the list that meet our conditions. Let us \"continent\" variable in `gapminder` dataframe. Get a basic table first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(gapminder$continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  Africa Americas     Asia   Europe  Oceania \n     624      300      396      360       24 \n```\n:::\n:::\n\n\nFilter has several operators:\n\n- `==`: equal to\n\n- `!=`: not equal to\n\n- `>`: greater than\n\n- `<`: less than\n\n- `>=`: greater than or equal to\n\n- `<=`: less than or equal to\n\nThere are five continents. Let us filter only observations from the Africa continent:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_gapminder <- gapminder |> \n  filter(continent == \"Africa\")\n\nafrica_gapminder  # print \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 624 × 6\n   country continent  year lifeExp      pop gdpPercap\n   <chr>   <chr>     <int>   <dbl>    <int>     <dbl>\n 1 Algeria Africa     1952    43.1  9279525     2449.\n 2 Algeria Africa     1957    45.7 10270856     3014.\n 3 Algeria Africa     1962    48.3 11000948     2551.\n 4 Algeria Africa     1967    51.4 12760499     3247.\n 5 Algeria Africa     1972    54.5 14760787     4183.\n 6 Algeria Africa     1977    58.0 17152804     4910.\n 7 Algeria Africa     1982    61.4 20033753     5745.\n 8 Algeria Africa     1987    65.8 23254956     5681.\n 9 Algeria Africa     1992    67.7 26298373     5023.\n10 Algeria Africa     1997    69.2 29072015     4797.\n# ℹ 614 more rows\n```\n:::\n:::\n\n\n\n`africa_gapminder` object is a dataframe we have just created, with only countries from the African continent. What `filter()` does is to return observations/rows that only meet our conditions:\n\n![](images/visualise_filter.png)\n\nLet us filter a numeric vector; for example, we may want to filter countries with population of above 50 million and assign results to an object named high_pop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhigh_pop <- gapminder |> \n  filter(pop > 50000000)\n\nhigh_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 190 × 6\n   country    continent  year lifeExp       pop gdpPercap\n   <chr>      <chr>     <int>   <dbl>     <int>     <dbl>\n 1 Bangladesh Asia       1957    39.3  51365468      662.\n 2 Bangladesh Asia       1962    41.2  56839289      686.\n 3 Bangladesh Asia       1967    43.5  62821884      721.\n 4 Bangladesh Asia       1972    45.3  70759295      630.\n 5 Bangladesh Asia       1977    46.9  80428306      660.\n 6 Bangladesh Asia       1982    50.0  93074406      677.\n 7 Bangladesh Asia       1987    52.8 103764241      752.\n 8 Bangladesh Asia       1992    56.0 113704579      838.\n 9 Bangladesh Asia       1997    59.4 123315288      973.\n10 Bangladesh Asia       2002    62.0 135656790     1136.\n# ℹ 180 more rows\n```\n:::\n:::\n\n\nYou can also combine 2 conditions. Let us say we want:\n\n- countries in Africa\n\n",
    "supporting": [
      "week-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}