{
  "hash": "a6cdef6f136b5b9dbadc728a05e9fdcb",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R Programming\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\n---\n\n\n## Learning objectives\n\n-   understand the basics of R programming\n\n-   Understand data types and objects\n\n-   understand base (built-in) R functions\n\n## Reading\n\n-   \n\n## Basics of R\n\nIn the previous section, we showed the layout of RStudio. For this lesson, you will write all the code in the scripts/source and see the output in the console. To comment on the code, you will use the hashtag (`#`) to tell R not to execute the line as a code.\n\nR can be used as a calculator:\n\n\n\n```{.r .cell-code}\n4 + 7 \n```\n\n[1] 11\n\n```{.r .cell-code}\n9 * 6 \n```\n\n[1] 54\n\n\n### Arithmetic Operators\n\n| Description    | Operator | Example |\n|----------------|----------|---------|\n| Addition       | \\+       | 1 + 3   |\n| Subtract       | \\-       | 90 - 5  |\n| Multiplication | \\*       | 6 \\* 7  |\n| Exponentiation | \\^       | 3 \\^ 6  |\n| Division       | /        | 54 / 7  |\n\n\nType in and run the above examples in the script or console. \n\n### Assignment operator \n\nNotice that we have been running previous codes without assigning them to objects. We use the assignment operator (`<-`) in R to assign whatever we have created into object; this can be a plot, a variable, a table, etc. Using above example, let us recreate our code but assigning them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddition <- 4 + 7 \n\nprint(addition)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\nmultiplication <- 9 * 6 \n\nprint(multiplication)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54\n```\n:::\n:::\n\n\nNotice in the above code, we have told R to create an object called 'addition' and every time we call `print()` function, the results will be printed in the console. Please remember the assignment operator (`<-`) as we will use it through this course. We can also assign objects using =:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddition = 4 + 7\n\nprint(addition)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n\nHowever, many R programmers and I use the `<-` operator for a serious reasons; so we will stick to it.\n\nAlso, you do not necessarily need to call the `print()` function in order to print results/output, you can just write the name of the object you have created, run it and it will be printed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nriver_km <- 1200\n\nriver_km\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1200\n```\n:::\n:::\n\n\nNotice that the object river_km when we print the object river_km, it prints what is inside of it, the element on the console.\n\n\nBasically, we have created **variables** (addition, multiplication, river_km). With these variables, we can perform basic analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntugela_length <- 502\n\norange_river_length <- 2200\n\n# Find the difference in river length\norange_river_length - orange_river_length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n# sum of rivers\n\norange_river_length - orange_river_length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n### Data types in R\n\nThere 3 basic data types in R\n\n- **character**: strings, text, etc\n\n- **numeric**: numbers, can be integers or whole numbers\n\n- **logical**: TRUE/FALSE, also called Boolean \n\n\nAn example of a **character**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nriver <- \"Tugela\"\n\nprovince <- \"KZN\"\n```\n:::\n\n\nNotice that a character need to be surrounded by (\"\") every time, otherwise R will return an error\n\n\n::: {.cell}\n\n```{.r .cell-code}\nriver <- Tugela\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'Tugela' not found\n```\n:::\n\n```{.r .cell-code}\nprovince <- KZN\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'KZN' not found\n```\n:::\n:::\n\n\nAn example of a numerical:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntugela_length_km <- 502\n\norange_river_length <- 2200\n```\n:::\n\n\nnumericals do not to need to be surrounded by `\" \"`, if you do, they will be stored as numeric. \n\n\nAn example of a logical data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkzn <- TRUE\n\nkzn \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngauteng <- FALSE\n\ngauteng \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nYou can ask R to tell you the type of the data structure by using `class()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(tugela_length_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(orange_river_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(river)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(gauteng)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n## Base R functions\n\nR has built-in functions that we can use to analyse and manipulate data. A function is always followed by `()`. We will use examples to illustrate various R functions.\n\n### Summary statistics\n\nBasic summary statistics functions are mean, median, range, standard deviation, etc. We can get in R using the `mean()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first create a vector of numbers (\"numeric vector\")\n\nrivers_length <- c(502, 2200, 1500, 3050, 800)\n\nrivers_length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  502 2200 1500 3050  800\n```\n:::\n\n```{.r .cell-code}\nmean(rivers_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1610.4\n```\n:::\n:::\n\n\nThe mean of a _rivers_length_ variable we have created is 1610.4. \n\nWe can use the `median()` function to get the median of our variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(rivers_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1500\n```\n:::\n:::\n\n\nThe median age is 1500\n\n\nAnd also the standard deviation using `sd()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(rivers_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1038.937\n```\n:::\n:::\n\n\nYou can get minimum and maximum values using `min()` and `max()` functions, respectively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(rivers_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 502\n```\n:::\n\n```{.r .cell-code}\nmax(rivers_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3050\n```\n:::\n:::\n\n\nYou can create a basic plot using a `hist()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(rivers_length)\n```\n\n::: {.cell-output-display}\n![](week-1a_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n\n\nYou may want to arrange the values into ascending or descending order using the `sort()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(rivers_length) # sort into ascending order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  502  800 1500 2200 3050\n```\n:::\n\n```{.r .cell-code}\nsort(rivers_length, decreasing = T) # sort into descending order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3050 2200 1500  800  502\n```\n:::\n:::\n\n\n\nIn this section, you have learnt basic data types, functions and operators. Next, we learn different type of data structures. ",
    "supporting": [
      "week-1a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}