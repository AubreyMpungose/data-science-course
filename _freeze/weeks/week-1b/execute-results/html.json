{
  "hash": "bcf7a8ce1783819a5cdd0a43db5c7c45",
  "result": {
    "markdown": "---\ntitle: \"2 Data Structures in R\"\ncode-copy: true\ncode-line-numbers: true\ntidy: true\n---\n\n\nWhile I aim to introduce data structures: vectors, dataframes, lists, matrices, however our key focus is on **dataframes**\n\n## Learning objectives\n\n- To understand data types: vectors, dataframes, lists, matrices\n\n- To do basic analysis\n\n## Please Read\n\n\n\n## 2.1 Vectors\n\nRemember objects we created in the previous section)? Those were all vectors. A vector is the basic data structure used to hold values of the same type. Similar to the previous section, a vector can be:\n\n- numeric\n\n- character\n\n- logical\n\nAlthough we are repeating stuff from previous section, but it worth it. \n\n### 2.1.1 Character vector\n\nLet us create a **character** vector of countries in Southern Africa:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsouthern_africa <- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\n## print southern_africa\n\nsouthern_africa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n```\n:::\n:::\n\n\n\nWe have created vector that named `southern_africa`, and it has the countries in the Southern African Region. Let us use basic functions to examine our `southern_africa` vector. We can get the type of vector by using `class()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(southern_africa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nIt is character vector. Remember from the previous section what is the character data type. \n\n\nWe can examine the length by using `length()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(southern_africa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nWe have 10 elements in the `southern_africa` vector\n\n### 2.1.2 Numeric vector\n\nLet us create a numeric vector, that we name `life_expectancy`, that has the average life expectancy of the countries of Southern Africa:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expectancy <- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\n\n## print the life_expectancy vector\n\nlife_expectancy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n```\n:::\n:::\n\n\nWe can confirm the type of vector we have created by using the `class()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nIndeed, the `life_expectancy` vector is a numeric vector.\n\nLet us do basic analyses of this vector. We can get the mean by using `mean()` functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 59.72\n```\n:::\n:::\n\n\nWe can get the median and standard deviation of `life_expectancy` vector using `median()` and `sd()` functions, respectively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60.2\n```\n:::\n\n```{.r .cell-code}\nsd(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.898582\n```\n:::\n:::\n\n\nYou can get an element of vector by using `[]` function. Let us get the first element in `life_expectancy` vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expectancy[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 61.6\n```\n:::\n:::\n\n\nTo get the 1st, 5th, 8th elements within a vector, you would do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expectancy[c(1, 5, 8)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 61.6 62.9 62.3\n```\n:::\n:::\n\n\nYou can also extract the vector elements by using the colon (`:`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expectancy[3:6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57.1 53.1 62.9 59.3\n```\n:::\n:::\n\n\nHere, we wanted to get all the elements starting from the 3rd position to the 6th position. \n\n\n**Key lesson**: a vector holds items of a similar type: as we have seen in the `southern_countries` and `life_exepctancy` vectors. \n\n## 2.2 Dataframes\n\nDataframes will be the key focus throughout the course, so I will just briefly explain what is a dataframe. A dataframe is tabular data format, consisting of columns and rows. Let us use an example by creating a dataframe in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a character vector\ncountry_names <- c(\"Angola\", \"Botswana\", \"Lesotho\", \"Malawi\", \"Mozambique\", \"Namibia\", \"South Africa\", \"Swaziland\", \"Zambia\", \"Zimbabwe\")\n\ncountry_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Angola\"       \"Botswana\"     \"Lesotho\"      \"Malawi\"       \"Mozambique\"  \n [6] \"Namibia\"      \"South Africa\" \"Swaziland\"    \"Zambia\"       \"Zimbabwe\"    \n```\n:::\n\n```{.r .cell-code}\n## Create a numeric vector\n\nlife_expectancy <- c(61.6, 61.1, 57.1, 53.1, 62.9, 59.3, 59.3, 62.3, 61.2, 59.3)\n\nlife_expectancy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n```\n:::\n:::\n\n\n\nBecause we have 2 vectors of equal length, we can create a dataframe, using a `data.frame()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica_df <- data.frame(country_names, life_expectancy) #combine two vectors to create a dataframe\n\nafrica_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country_names life_expectancy\n1         Angola            61.6\n2       Botswana            61.1\n3        Lesotho            57.1\n4         Malawi            53.1\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n```\n:::\n:::\n\n\nWe have created `africa_df` dataframe, with columns and rows. Let us examine it. How many columns and rows are in the dataframe. We can use the `str()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(africa_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t10 obs. of  2 variables:\n $ country_names  : chr  \"Angola\" \"Botswana\" \"Lesotho\" \"Malawi\" ...\n $ life_expectancy: num  61.6 61.1 57.1 53.1 62.9 59.3 59.3 62.3 61.2 59.3\n```\n:::\n:::\n\n\nR tells us that there are 10 observations (rows) and 2 columns\n\nLet us view the first few observations (rows) using the `head()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(africa_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country_names life_expectancy\n1        Angola            61.6\n2      Botswana            61.1\n3       Lesotho            57.1\n4        Malawi            53.1\n5    Mozambique            62.9\n6       Namibia            59.3\n```\n:::\n:::\n\n\nView the last few observations using the `tail()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(africa_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country_names life_expectancy\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n```\n:::\n:::\n\n\nIn the following sections, we will be working with dataframes a lot, and other non-exhastive functions to manipulate and transofrm dataframes. \n\n## 2.3 Other data types: matrices and lists\n\nYou will learn more about `matrix` objects when you advance in your data science career.\n\n`lists` are another data structure that are used to hold objects of different type. For example, they can hold both vector and dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## we already have `africa_df` dataframe\n\n## let us create a vector\n\nnames <- c(\"Aubrey\", \"Sphethu\", \"Peter\")\n\nages <- c(32, 7, 19)\n```\n:::\n\n\nWe have  objects: `africa_df` (dataframe) and `names` (vector) and `ages` (vector) objects. From these objects, we can create a lists:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_list <- list(africa_df, names, ages)\n\nfirst_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   country_names life_expectancy\n1         Angola            61.6\n2       Botswana            61.1\n3        Lesotho            57.1\n4         Malawi            53.1\n5     Mozambique            62.9\n6        Namibia            59.3\n7   South Africa            59.3\n8      Swaziland            62.3\n9         Zambia            61.2\n10      Zimbabwe            59.3\n\n[[2]]\n[1] \"Aubrey\"  \"Sphethu\" \"Peter\"  \n\n[[3]]\n[1] 32  7 19\n```\n:::\n:::\n\n\nDid you see that Jimmy? We actually printed the list. As you advance in your programming with R, you will see why lists are important and how everything is a lit. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}